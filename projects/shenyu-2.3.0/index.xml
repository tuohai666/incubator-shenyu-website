<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Apache ShenYu(2.3.0) on Apache ShenYu</title><link>/projects/shenyu-2.3.0/</link><description>Recent content in Apache ShenYu(2.3.0) on Apache ShenYu</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><atom:link href="/projects/shenyu-2.3.0/index.xml" rel="self" type="application/rss+xml"/><item><title>A multilingual HTTP client</title><link>/projects/shenyu-2.3.0/developer-soul-client/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/developer-soul-client/</guid><description> Description This document focuses on how to access gateways for HTTP services in other languages. How to customize the development of soul-http-client. Customize Http Client Request Method: POST Request Path: http://soul-admin/soul-client/springmvc-register, soul-admin represents IP + Port of admin Request Params：passing JSON type parameters through the body. { &amp;quot;appName&amp;quot;: &amp;quot;xxx&amp;quot;, //required &amp;quot;context&amp;quot;: &amp;quot;/xxx&amp;quot;, //required &amp;quot;path&amp;quot;: &amp;quot;xxx&amp;quot;, //required &amp;quot;pathDesc&amp;quot;: &amp;quot;xxx&amp;quot;, &amp;quot;rpcType&amp;quot;: &amp;quot;http&amp;quot;, //required &amp;quot;host&amp;quot;: &amp;quot;xxx&amp;quot;, //required &amp;quot;port&amp;quot;: xxx, //required &amp;quot;ruleName&amp;quot;: &amp;quot;xxx&amp;quot;, //required &amp;quot;enabled&amp;quot;: &amp;quot;true&amp;quot;, //required &amp;quot;registerMetaData&amp;quot;: &amp;quot;true&amp;quot; //required }</description></item><item><title>Configuration Flow Introduction</title><link>/projects/shenyu-2.3.0/config/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/config/</guid><description>Description This article introduces the flow of synchronizing to the gateway after the data operation of admin backend system. Usage User can arbitrary modify data in soul-admin backend and this will immediately synchronize to the jvm memory of the gateway. Synchronize the plugin data of soul,selector,rule data, metadata, signature data, etc. All the rules of plugin selectors are dynamically configured and take effect immediately without restarting the service.</description></item><item><title>Custom Plugin</title><link>/projects/shenyu-2.3.0/custom-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/custom-plugin/</guid><description>Description Plugins are core executors of soul gateway. Every plugin handles matched requests when enabled. There are two kinds of plugins in the soul gateway. The first type is a call chain with a single responsibility, and traffic cannot be customized. The other one can do its own chain of responsibility for matched traffic. You could reference from soul-plugin module and develop plugins by yourself. Please fire pull requests of your wonderful plugins without hesitate.</description></item><item><title>Custom Response</title><link>/projects/shenyu-2.3.0/custom-result/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/custom-result/</guid><description>Description This doc offers examples for customising response structure. The response body structure in gateways should be unified, it is recommended for specify yours. Default Implementation The default implementation class is org.dromara.soul.plugin.api.result.DefaultSoulResult. Following is the response structure. public class SoulDefaultEntity implements Serializable { private static final long serialVersionUID = -2792556188993845048L; private Integer code; private String message; private Object data; } The returned json as follows: { &amp;quot;code&amp;quot;: -100, //response code,</description></item><item><title>Custom Sign Algorithm</title><link>/projects/shenyu-2.3.0/custom-sign-algorithm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/custom-sign-algorithm/</guid><description>Description Users can customize the signature authentication algorithm to achieve verification. Extension The default implementation is org.dromara.soul.plugin.sign.service.DefaultSignService. Declare a new class named &amp;ldquo;A&amp;rdquo; and implements org.dromara.soul.plugin.api.SignService. public interface SignService { /** * Sign verify pair. * * @param exchange the exchange * @return the pair */ Pair&amp;lt;Boolean, String&amp;gt; signVerify(ServerWebExchange exchange); } When returning true in Pair, the sign verification passes. If there&amp;rsquo;s false, the String in Pair will be return to the frontend to show.</description></item><item><title>Data Synchronization Design</title><link>/projects/shenyu-2.3.0/data-sync/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/data-sync/</guid><description>Description This article mainly explains three ways of database synchronization and their principles.
Preface Gateway is the entrance of request and it is a very important part in micro service architecture, therefore the importance of gateway high availability is self-evident. When we use gateway, we have to change configuration such as flow rule, route rule for satisfying business requirement. Therefore, the dynamic configuration of the gateway is an important factor to ensure the high availability of the gateway.</description></item><item><title>Database Design</title><link>/projects/shenyu-2.3.0/database-design/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/database-design/</guid><description>Plugin use database to store plugin, selector, rule configuration data and relationship.
The Database Table UML Diagram: Detailed design:
One plugin corresponds to multiple selectors,one selector corresponds to multiple rules.
One selector corresponds to multiple match conditions,one rule corresponds to multiple match conditions.
Each rule handles differently in corresponding plugin according to field handler,field handler is a kind of data of JSON string type.You can view detail during the use of admin.</description></item><item><title>Dict Management</title><link>/projects/shenyu-2.3.0/dictionary-management/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/dictionary-management/</guid><description>Explanation Dictionary management is primarily used to maintain and manage common data dictionaries. Table design sql CREATE TABLE IF NOT EXISTS `soul_dict` ( `id` varchar(128) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT &#39;primary key id&#39;, `type` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT &#39;type&#39;, `dict_code` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT &#39;dictionary encoding&#39;, `dict_name` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT &#39;dictionary name&#39;, `dict_value` varchar(100) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT &#39;dictionary value&#39;, `desc` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT &#39;dictionary description or remarks&#39;, `sort` int(4) NOT NULL COMMENT &#39;sort&#39;, `enabled` tinyint(4) DEFAULT NULL COMMENT &#39;whether it is enabled&#39;, `date_created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#39;create time&#39;, `date_updated` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT &#39;update time&#39;, PRIMARY KEY (`id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci; The current usage scenario is when the plugin handle configuring the data_type=3 (select box) eg.</description></item><item><title>Divide Plugin</title><link>/projects/shenyu-2.3.0/divide-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/divide-plugin/</guid><description>Explanation Divide is the core processing plugin for gateway to process http requests. Plugin Setting Enable plugin, soul-admin &amp;ndash;&amp;gt; plugin management&amp;ndash;&amp;gt; divide set to enable.
Divide plugin，cooperate with starter to take effect，please refer to：user-http。
&amp;lt;!--if you use http proxy start this--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;soul-spring-boot-starter-plugin-divide&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;soul-spring-boot-starter-plugin-httpclient&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Plugin Detail Divide is a plugin for http forward proxy, and all http requests are called by this plugin in load balancing.</description></item><item><title>Doc Download</title><link>/projects/shenyu-2.3.0/download/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/download/</guid><description>PDF English 中文</description></item><item><title>Dubbo Plugin</title><link>/projects/shenyu-2.3.0/dubbo-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/dubbo-plugin/</guid><description>Explanation Dubbo is a plugin that converts http protocol into Dubbo protocol and it is also the key for gateway to realize dubbo generic service. Dubbo plugin needs to cooperate with metadata to realize dubbo calls, please refer to: metaData. Apache dubbo and alibaba dubbo users both use the same plugin. &amp;lt;!--if you use dubbo start this--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;soul-spring-boot-starter-plugin-alibab-dubbo&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;soul-spring-boot-starter-plugin-apache-dubbo&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Plugin Setting In soul-admin &amp;ndash;&amp;gt; plugin management-&amp;gt; dubbo setting enable.</description></item><item><title>Environment Setup</title><link>/projects/shenyu-2.3.0/soul-set-up/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/soul-set-up/</guid><description>Features Soul is an open source plugin framework, which is flexibility and extensibility since 2.2.0 version. With soul you can easily create application with your own gateway. System Requirement: JDK 1.8+, Mysql 5.5.20 +. Soul-Admin remote download 2.3.0 download soul-admin-bin-2.3.0-RELEASE.tar.gz
tar soul-admin-bin-2.3.0-RELEASE.tar.gz. cd /bin.
use h2 store.
&amp;gt; windwos : start.bat --spring.profiles.active = h2 &amp;gt; linux : ./start.sh --spring.profiles.active = h2 use mysql store.</description></item><item><title>Fetching Correct IP Address And Host</title><link>/projects/shenyu-2.3.0/custom-parsing-ip-and-host/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/custom-parsing-ip-and-host/</guid><description>Description This doc demonstrates how to get correct IP address and host when soul serves behind nginx reverse proxy. After fetched real IP and host, you can match them with plugins and selectors. Default Implementation The embedded implementation in soul is :org.dromara.soul.web.forwarde.ForwardedRemoteAddressResolver。
You need to config X-Forwarded-For in nginx first to get correct IP address and host.
Implement through a Plugin Declare a new class named &amp;ldquo;A&amp;rdquo; and implements org.</description></item><item><title>File Uploading And Downloading</title><link>/projects/shenyu-2.3.0/file-and-image/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/file-and-image/</guid><description> description This doc gives a brief description for uploading and downloading files using soul. File Uploading The default file size limit is 10M. For custom limitation, use--file.size with an integer variable. e.g.--file.size = 30 Upload your files just as way you did before File Downloading Soul supports downloading files in streams. There is no need to change anything.</description></item><item><title>Filter Extension</title><link>/projects/shenyu-2.3.0/custom-filter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/custom-filter/</guid><description>Description This doc shows a demo for how to extend org.springframework.web.server.WebFliter. CORS Support org.dromara.soul.bootstrap.cors.CrossFilter is designed for WebFilter implementation. public class CrossFilter implements WebFilter { private static final String ALLOWED_HEADERS = &amp;quot;x-requested-with, authorization, Content-Type, Authorization, credential, X-XSRF-TOKEN,token,username,client&amp;quot;; private static final String ALLOWED_METHODS = &amp;quot;*&amp;quot;; private static final String ALLOWED_ORIGIN = &amp;quot;*&amp;quot;; private static final String ALLOWED_EXPOSE = &amp;quot;*&amp;quot;; private static final String MAX_AGE = &amp;quot;18000&amp;quot;; @Override @SuppressWarnings(&amp;quot;all&amp;quot;) public Mono&amp;lt;Void&amp;gt; filter(final ServerWebExchange exchange, final WebFilterChain chain) { ServerHttpRequest request = exchange.</description></item><item><title>Hystrix Plugin</title><link>/projects/shenyu-2.3.0/hystrix-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/hystrix-plugin/</guid><description>Explanation Hystrix plugin is the core implementation used by gateway to fuse traffic. Use semaphores to process requests. Plugin Setting In soul-admin &amp;ndash;&amp;gt; plugin management &amp;ndash;&amp;gt; hystrix, set to enable. If the user don&amp;rsquo;t use, please disable the plugin in the background. Plugin Instruction Introduce hystrix dependency in the pom.xml file of the gateway. &amp;lt;!-- soul hystrix plugin start--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;soul-spring-boot-starter-plugin-hystrix&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!</description></item><item><title>Integrate Http with soul gateway</title><link>/projects/shenyu-2.3.0/http-proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/http-proxy/</guid><description>Features This chapter is a guide about integrating Http service with soul gateway. Soul gateway uses divide plugin handling http request, pls enable it in soul-admin background. Please start soul-admin successfully before integrating and Environment Setup is Ok. Configure soul gateway as Http proxy. Add these dependencies in gateway&amp;rsquo;s pom.xml: &amp;lt;!--if you use http proxy start this--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;soul-spring-boot-starter-plugin-divide&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;soul-spring-boot-starter-plugin-httpclient&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${last.</description></item><item><title>Integrate dubbo with soul gateway</title><link>/projects/shenyu-2.3.0/dubbo-proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/dubbo-proxy/</guid><description>Features This chapter is a guide about integrating dubbo service with soul gateway. Support Alibaba Dubbo(&amp;lt; 2.7.x) and Apache Dubbo (&amp;gt;=2.7.x). Please start soul-admin successfully before integrating, and Environment Setup is Ok. Configure soul gateway as Dubbo proxy Add these dependencies in gateway&amp;rsquo;s pom.xml. Alibaba dubbo user, configure the dubbo version and registry center with yours.
&amp;lt;!--soul alibaba dubbo plugin start--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;soul-spring-boot-starter-plugin-alibaba-dubbo&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!</description></item><item><title>MetaData Concept Design</title><link>/projects/shenyu-2.3.0/meta-data/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/meta-data/</guid><description>Description This article mainly explains the concept,design of metadata and how to connect in the soul gateway. Technical Solutions Add a new table in the database,and data can synchronize to the JVM memory of gateway according to the data synchronization scheme.
Table Structure:
CREATE TABLE IF NOT EXISTS `meta_data` ( `id` varchar(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT &#39;id&#39;, `app_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT &#39;application name&#39;, `path` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT &#39;path,not repeatable&#39;, `path_desc` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT &#39;path description&#39;, `rpc_type` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT &#39;rpc type&#39;, `service_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT &#39;service name&#39;, `method_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT &#39;method name&#39;, `parameter_types` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT &#39;multiple parameter types, split by comma&#39;, `rpc_ext` varchar(1024) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT &#39;rpc extension information,json format&#39;, `date_created` datetime(0) NOT NULL COMMENT &#39;create date&#39;, `date_updated` datetime(0) NOT NULL ON UPDATE CURRENT_TIMESTAMP(0) COMMENT &#39;update date&#39;, `enabled` tinyint(4) NOT NULL DEFAULT 0 COMMENT &#39;enable status&#39;, PRIMARY KEY (`id`) USING BTREE ) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci ROW_FORMAT = Dynamic; Metadata design as below,the most important is using it in dubbo&amp;rsquo;s generalization call.</description></item><item><title>Monitor Plugin</title><link>/projects/shenyu-2.3.0/monitor-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/monitor-plugin/</guid><description>Explanation Monitor plugin is used to monitor its own running status(JVM-related) by gateway, include request response delay, QPS, TPS, and other related metrics. Technical Solutions Flow Diagram Make even tracking in soul gateway by asynchronous or synchronous mode.
The prometheus server pulls metrics&amp;rsquo; through http request, and then displays it by Grafana.
Plugin Setting In soul-admin&amp;ndash;&amp;gt; plugin management-&amp;gt; monitor, set to enable.</description></item><item><title>Plugin Context Path Mapping</title><link>/projects/shenyu-2.3.0/context-path-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/context-path-plugin/</guid><description>Explanation When making invokes to the target service, soul Gateway also allows users to customize the context using the context_path plugin. Plugin Setting In soul-admin &amp;ndash;&amp;gt; plugin management &amp;ndash;&amp;gt; context_path, set to enable. Introduce context_path support in the pox.xml file of the gateway. If the user don&amp;rsquo;t use, please disable the plugin in the background. &amp;lt;!-- soul context_path plugin start--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;soul-spring-boot-starter-plugin-context-path&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!</description></item><item><title>Plugin Handle Explanation</title><link>/projects/shenyu-2.3.0/plugin-handle-explanation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/plugin-handle-explanation/</guid><description>Explanation In our Soul-Admin background, each plugin uses the Handle field to represent a different processing, and plugin processing is used to manage and edit custom processing fields in JSON. This feature is mainly used to support the plug-in handling template configuration Table Design sql
CREATE TABLE IF NOT EXISTS `plugin_handle` ( `id` varchar(128) NOT NULL, `plugin_id` varchar(128) NOT NULL COMMENT &#39;plugin id&#39;, `field` varchar(100) NOT NULL COMMENT &#39;field&#39;, `label` varchar(100) DEFAULT NULL COMMENT &#39;label&#39;, `data_type` smallint(6) NOT NULL DEFAULT &#39;1&#39; COMMENT &#39;data type 1 number 2 string 3 select box&#39;, `type` smallint(6) NULL COMMENT &#39;type, 1 means selector, 2 means rule&#39;, `sort` int(4) NULL COMMENT &#39;sort&#39;, `ext_obj` varchar(1024) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT &#39;extra configuration (json format data)&#39;, `date_created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#39;create time&#39;, `date_updated` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT &#39;update time&#39;, PRIMARY KEY (`id`), UNIQUE KEY `plugin_id_field_type` (`plugin_id`,`field`,`type`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE = utf8mb4_unicode_ci ROW_FORMAT = Dynamic; Tutorial eg.</description></item><item><title>Quick start with Dubbo</title><link>/projects/shenyu-2.3.0/quick-start-dubbo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/quick-start-dubbo/</guid><description>This document introduces how to quickly access the Soul Gateway using Dubbo. You can get the code example of this document by clicking here.
Environment to prepare Please refer to the setup and launch soul-admin and soul-bootstrap, In addition, if you use ZooKeeper for Dubbo, you need to download it in advance.
Run the soul-examples-dubbo project Downloadsoul-examples-dubbo, replace the register address in spring-dubbo.xml with your local zk address, such as:</description></item><item><title>Quick start with SpringCloud</title><link>/projects/shenyu-2.3.0/quick-start-springcloud/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/quick-start-springcloud/</guid><description>This document introduces how to quickly access the Soul Gateway using SpringCloud. You can get the code example of this document by clicking here.
Environment to prepare Please refer to the setup and launch soul-admin and soul-bootstrap.
Add the following dependencies to the soul-bootstrap&amp;rsquo;s pom.xml file: &amp;lt;!--soul springCloud plugin start--&amp;gt; dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;soul-spring-boot-starter-plugin-springcloud&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${project.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-cloud-commons&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.2.0.RELEASE&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-cloud-starter-netflix-ribbon&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.2.0.RELEASE&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- If using Eureka as a registry needs to be introduced --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.</description></item><item><title>Quick start with Tars</title><link>/projects/shenyu-2.3.0/quick-start-tars/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/quick-start-tars/</guid><description>This document introduces how to quickly access the Soul Gateway using Tars. You can get the code example of this document by clicking here.
Environment to prepare Please refer to the setup and launch soul-admin and soul-bootstrap.
Note: soul-bootstrap need to import tars dependencies
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;soul-spring-boot-starter-plugin-tars&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${project.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.tencent.tars&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;tars-client&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.7.2&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Run the soul-examples-tars project Download soul-examples-tars
Modify host in application.yml to be your local IP</description></item><item><title>Quick start with grpc</title><link>/projects/shenyu-2.3.0/quick-start-grpc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/quick-start-grpc/</guid><description>This document introduces how to quickly access the Soul Gateway using Grpc. You can get the code example of this document by clicking here.
Environment to prepare Please refer to the setup and launch soul-admin and soul-bootstrap.
Note: soul-bootstrap need to import grpc dependencies
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;soul-spring-boot-starter-plugin-grpc&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${project.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Run the soul-examples-grpc project Download soul-examples-grpc
Run the following command under soul-examples-grpc to generate Java code
mvn protobuf:compile mvn protobuf:compile-custom Execute the org.</description></item><item><title>Quick start with http</title><link>/projects/shenyu-2.3.0/quick-start-http/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/quick-start-http/</guid><description>This document introduces how to quickly access the Soul Gateway using Http. You can get the code example of this document by clicking here.
Environment to prepare Please refer to the setup and launch soul-admin and soul-bootstrap.
Introducing gateway to HTTP proxy plugin
Add the following dependencies to the soul-bootstrap&amp;rsquo;s pom.xml file: &amp;lt;!--if you use http proxy start this--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;soul-spring-boot-starter-plugin-divide&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;soul-spring-boot-starter-plugin-httpclient&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${last.</description></item><item><title>Quick start with sofa</title><link>/projects/shenyu-2.3.0/quick-start-sofa/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/quick-start-sofa/</guid><description>This document introduces how to quickly access the Soul Gateway using Sofa RPC. You can get the code example of this document by clicking here.
Environment to prepare Please refer to the setup and launch soul-admin and soul-bootstrap, In addition, if you use ZooKeeper for Sofa, you need to download it in advance.
Note: soul-bootstrap need to import sofa dependencies
&amp;lt;!-- soul sofa plugin starter--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.alipay.sofa&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;sofa-rpc-all&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${sofa.rpc.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.</description></item><item><title>RateLimiter Plugin</title><link>/projects/shenyu-2.3.0/rate-limiter-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/rate-limiter-plugin/</guid><description>Explanation rateLimiter is core implementation of gateway restrictions on network traffic.
The soul gateway provides a variety of current limiting algorithms, including token bucket algorithm, concurrent token bucket algorithm, leaky bucket algorithm and sliding time window algorithm.
The implementation of current limiting algorithm of soul gateway is based on redis.
You can set to the interface level or the parameter level. How to use it depends on your traffic configuration.</description></item><item><title>Redirect Plugin</title><link>/projects/shenyu-2.3.0/redirect-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/redirect-plugin/</guid><description>Explanation When the soul gateway makes proxy calls to the target service, it also allows users to use the redirect plugin to redirect requests.
Plugin Setting In soul-admin &amp;ndash;&amp;gt; plugin management &amp;ndash;&amp;gt; redirect ,set to enable。 Introduce redirect support in the pox.xml file of the gateway. If the user don&amp;rsquo;t use, please disable the plugin in the background. Selectors and rules, only matching requests will be forwarded and redirected, please see: Selector rules。 Maven Dependency Add the plugin dependency in the pom.</description></item><item><title>Register Center Access</title><link>/projects/shenyu-2.3.0/register-center-access/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/register-center-access/</guid><description>Explain Explain register center access config
HTTP Registry Soul-Admin Set the config in application.yml soul: register: registerType: http props: checked: true # is checked zombieCheckTimes: 5 # How many times does it fail to detect the service scheduledTime: 10 # Timed detection interval time Soul-Client Set the config in application.yml soul: client: registerType: http serverLists: http://localhost:9095 props: contextPath: /http appName: http port: 8188 isFull: false # registerType : register type, set http # serverList: when register type is http，set Soul-Admin address list，pls note &#39;http://&#39; is necessary.</description></item><item><title>Register Center Design</title><link>/projects/shenyu-2.3.0/register-center-design/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/register-center-design/</guid><description>Description This article mainly explains three ways of register center and their principles. Client When client server start, the register center client will be loaded by spi.
Put data to Disruptor when spring bean load.
Soul register client get data from Disruptor, and it will send request to register server.
Disruptor can decouple data from operation and facilitate expansion.
Server When Soul-Admin server start, register center server will be loaded by spi.</description></item><item><title>Resilience4j Plugin</title><link>/projects/shenyu-2.3.0/resilience4j-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/resilience4j-plugin/</guid><description>Explanation Resilience4j is one of the options that supports flow control and circuit breaking. Resilience4j supports flow control and circuit breaking functions for gateway. Plugin Setting In soul-admin &amp;ndash;&amp;gt; plugin management &amp;ndash;&amp;gt; resilience4j set to enable. If you don&amp;rsquo;t want to use it, please close the plugin in soul-admin. Plugin Usage Introducing the follow supports to the pom.xml file of soul project. &amp;lt;!-- soul resilience4j plugin start--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.</description></item><item><title>Rewrite Plugin</title><link>/projects/shenyu-2.3.0/rewrite-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/rewrite-plugin/</guid><description>Explanation When making proxy invokes to the target service, soul Gateway also allows users to rewrite the request path using the rewrite plugin. Plugin Setting In soul-admin &amp;ndash;&amp;gt; plugin management &amp;ndash;&amp;gt; rewrite ,set to enable. Introduce rewrite support in the pox.xml file of the gateway. If the user don&amp;rsquo;t use, please disable the plugin in the background. &amp;lt;!-- soul rewrite plugin start--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;soul-spring-boot-starter-plugin-rewrite&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${last.</description></item><item><title>Selector Detailed Explanation</title><link>/projects/shenyu-2.3.0/selector-and-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/selector-and-rule/</guid><description>Features Selector and rule are the key point of soul gateway, you can manage any request with it.
This chapter is mainly focus on the concepts of selector and rule and how to use it.
Overview One plugin has many selector and a selector has many rules, selector is the first filter of request, and the rule is the final filter. Please consider this, it would be perfect when the plugin executes the request until it reached the config value.</description></item><item><title>Sentinel Plugin</title><link>/projects/shenyu-2.3.0/sentinel-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/sentinel-plugin/</guid><description>Explanation Sentinel is one of the options that supports flow control and circuit breaking. Sentinel supports flow control and circuit breaking functions for gateway. Plugin Setting In soul-admin &amp;ndash;&amp;gt; plugin management &amp;ndash;&amp;gt; sentinel set to enable. If you don&amp;rsquo;t want to use it, please close the plugin in soul-admin. Plugin Usage Introducing the follow supports to the pom.xml file of soul project. &amp;lt;!-- soul sentinel plugin start--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.</description></item><item><title>Sign Plugin</title><link>/projects/shenyu-2.3.0/sign-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/sign-plugin/</guid><description>Explanation Sign is a native plugin of soul Gateway and is used to process signature authentication of requests. Plugin Setting In soul-admin -&amp;gt; plugin management &amp;ndash;&amp;gt; sign set to enable. Plugin Usage Introducing sign dependency in the pom.xml file of the gateway &amp;lt;!-- soul sign plugin start--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;soul-spring-boot-starter-plugin-sign&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- soul sign plugin end--&amp;gt; Selectors and rules, please refer to: selector.</description></item><item><title>Sofa Plugin</title><link>/projects/shenyu-2.3.0/sofa-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/sofa-plugin/</guid><description>Description The sofa plug-in is a plug-in that converts the HTTP protocol into the sofa protocol, and it is also the key to the gateway to realize the sofa generalization call. sThe sofa plug-in needs to cooperate with metadata to realize the call of Dubbo. Please refer to: Metadata。 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;soul-spring-boot-starter-plugin-sofa&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Plugin Settings First, go to soul-admin &amp;ndash;&amp;gt; plug-in management-&amp;gt; setting sofa is open.</description></item><item><title>Sofa RPC Proxy</title><link>/projects/shenyu-2.3.0/sofa-rpc-proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/sofa-rpc-proxy/</guid><description>Description This article is about sofa users using sofa plug-in support,and the tutorial of connecting your own sofa service to the soul gateway. Before connecting, please start soul-admin correctly and Setup Environment Ok。 Introduce the plug-in that the gateway supports for sofa Add the following dependencies in the gateway&amp;rsquo;s pom.xml file： Replace the sofa version with yours, and replace the jar package in the registry with yours, The following is a reference。 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.</description></item><item><title>Soul Introduction</title><link>/projects/shenyu-2.3.0/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/overview/</guid><description> What is the Soul? This is an asynchronous, high-performance, cross-language, responsive API gateway.
Features Support various languages (http protocol), support dubbo, spring-cloud, Grpc, Motan, Sofa, Tars protocol. Plugin design idea, plugin hot swap, easy to expand. Flexible flow filtering to meet various flow control. Built-in rich plugin support, authentication, limiting, fuse, firewall, etc. Dynamic flow configuration, high performance. Support cluster deployment, A/B Test, blue-green release. Architecture Diagram</description></item><item><title>Soul Optimize</title><link>/projects/shenyu-2.3.0/soul-optimize/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/soul-optimize/</guid><description>Description This doc shows how to do performance optimization for soul. Time Consumption Soul is JVM driven and processing time for a single request is nearly between 1-3 ms. Netty Optimization spring-webflux is one of dependencies of soul, and it uses Netty in lower layer. The demo down below demonstrates tuning soul by customizing params in Netty. @Bean public NettyReactiveWebServerFactory nettyReactiveWebServerFactory() { NettyReactiveWebServerFactory webServerFactory = new NettyReactiveWebServerFactory(); webServerFactory.</description></item><item><title>SpringCloud Plugin</title><link>/projects/shenyu-2.3.0/spring-cloud-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/spring-cloud-plugin/</guid><description>Explanation This plugin is the core of transforming http protocol into springCloud protocol. Introducing Plugin Support of SpringCould Gateway Introducing those dependencies in the pom.xml file of the gateway. &amp;lt;!--soul springCloud plugin start--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;soul-spring-boot-starter-plugin-springcloud&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;soul-spring-boot-starter-plugin-httpclient&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--soul springCloud plugin end--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-cloud-commons&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.2.0.RELEASE&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-cloud-starter-netflix-ribbon&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.2.0.RELEASE&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Plugin Setting In soul-admin &amp;ndash;&amp;gt; plugin management-&amp;gt; springCloud, set to enable.</description></item><item><title>SpringCloud Proxy</title><link>/projects/shenyu-2.3.0/spring-cloud-proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/spring-cloud-proxy/</guid><description>Features This article is a guide about how to integrate Spring Cloud with soul gateway quickly. Please enable springCloud plug-in in soul-admin background. Please start soul-admin successfully before integrating and Environment Setup is Ok. Configure soul gateway as Spring Cloud proxy add these dependencies in gateway&amp;rsquo;s pom.xml: &amp;lt;!--soul springCloud plugin start--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;soul-spring-boot-starter-plugin-springcloud&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--soul springCloud plugin end--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-cloud-commons&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.2.0.RELEASE&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.</description></item><item><title>Team Introduction</title><link>/projects/shenyu-2.3.0/team/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/team/</guid><description> Team Member（In no particular order） Name Github Role Company Xiao Yu yu199195 VP jd.com Zhang Yonglun tuohai666 PMC jd.com Deng Liming dengliming PMC a start-up company Tang Yudong tydhot PMC perfma Zhang lei SaberSola PMC helloglobal Huang Xiaofeng huangxfchn committer shein Ding jianming nuo-promise committer a start-up company Feng Zhenbing fengzhenbing committer a start-up company yangze HoldDie committer IBM</description></item><item><title>Thread Model</title><link>/projects/shenyu-2.3.0/thread/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/thread/</guid><description>Description This article gives an introduction to thread models in soul and usage in various scenarios. IO And Work Thread spring-webflux is one of dependencies of soul, and it uses Netty thread model in lower layer. Business Thread Use scheduling thread to execute by default. A fixed thread pool manages business threads, the number of threads is count in this formula: cpu * 2 + 1.</description></item><item><title>Use Different Data-Sync Strategy</title><link>/projects/shenyu-2.3.0/use-data-sync/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/use-data-sync/</guid><description>Features Data synchronization is the key of gateway high performance, which is to sync &amp;lsquo;soul-admin&amp;rsquo; config data into the JVM memory of soul cluster. Implementation principles, pls refer to：dataSync。 In the article, the gateway is the environment you setup. please refer to：Environment Setup. Websocket sync（default method，recommend） gateway setting（note:restart）
Add these dependencies in pom.xml： &amp;lt;!--soul data sync start use websocket--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;soul-spring-boot-starter-sync-data-websocket&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; add these config values in springboot yaml file: soul : sync: websocket : urls: ws://localhost:9095/websocket #urls: address of soul-admin，multi-address will be splitted with (,).</description></item><item><title>Waf Plugin</title><link>/projects/shenyu-2.3.0/waf-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/waf-plugin/</guid><description>Explanation Waf is the core implementation of gateway to realize firewall function for network traffic. Plugin Setting In soul-admin &amp;ndash;&amp;gt; plugin management-&amp;gt; waf set to enable. If the user don&amp;rsquo;t use, please disable the plugin in the background. Add configuration mode in plugin editing. {&amp;quot;model&amp;quot;:&amp;quot;black&amp;quot;} # The default mode is blacklist mode; If setting is mixed, it will be mixed mode. We will explain it specifically below.</description></item><item><title>Websocket Plugin</title><link>/projects/shenyu-2.3.0/websocket-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/websocket-plugin/</guid><description>Explanation Soul gateway also support proxy of websocket. In websocket support, divide plugin is used in it. Plugin Setting In soul-admin &amp;ndash;&amp;gt; plugin management &amp;ndash;&amp;gt; divide, set to enable. Introducing dependencies in the pom.xml file of the gateway &amp;lt;!--if you use http proxy start this--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;soul-spring-boot-starter-plugin-divide&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;soul-spring-boot-starter-plugin-httpclient&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Request Path When using soul proxy websocket, its request path is (example):ws://localhost:9195/?</description></item></channel></rss>