<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dromara on Apache ShenYu</title><link>/</link><description>Recent content in Dromara on Apache ShenYu</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>Sign ICLA Guide</title><link>/community/icla/</link><pubDate>Tue, 18 May 2021 00:00:00 +0000</pubDate><guid>/community/icla/</guid><description>Apache Sign ICLA Guide Apache CLA short for Apache Contributor License Agreement, the purpose of this agreement is to clearly define the terms under which intellectual property has been contributed to the ASF and thereby allow us to defend the project should there be a legal dispute regarding the software at some future time. A signed ICLA is required to be on file before an individual is given commit rights</description></item><item><title>Apache ShenYu Dream Code Book Club Introduction</title><link>/blog/apache-activites-introduce/</link><pubDate>Sun, 27 Dec 2020 15:00:00 +0000</pubDate><guid>/blog/apache-activites-introduce/</guid><description>Apache ShenYu Dream Code Book Club（Apache ShenYu 2020 event introduction） Date: Sunday, December 27, 2020 Activity background In order to increase the enthusiasm of community participants, promote the construction of the Apache ShenYu community, exercise everyone&amp;rsquo;s expressive ability and improve the core strength of technology, the community organized this event in the form of source code reading. Activity purpose, meaning and goal Increase motivation Improve technical strength and expand everyone&amp;rsquo;s horizons Exercise language skills Promote the harmony, unity and progress of the community Make the Apache ShenYu community bigger and bigger Activity development The activity is divided into multiple phases.</description></item><item><title>【Soul gateway release milestone version 2.3.0】New support for grpc, tars and sofa protocols!</title><link>/news/shenyu-2.3.0/</link><pubDate>Sun, 05 Jul 2020 00:00:00 +0000</pubDate><guid>/news/shenyu-2.3.0/</guid><description>It&amp;rsquo;s half a year since the last release. In this half a year, our community friends and I have done too much. Completed nearly 200 PR, published nearly 300 articles of source code analysis, added more than 120 contributors, promoted 7 members of the commiter who won the legitimate JetBrains. We have completed many, many functions With their help. Thank you very much.
soul-admin（dashboard） Admin is the control panel of the whole gateway, which is in charge of all traffic and rules matching.</description></item><item><title>Apache ShenYu Code Conduct</title><link>/community/code-conduct/</link><pubDate>Tue, 09 Apr 2019 00:00:00 +0000</pubDate><guid>/community/code-conduct/</guid><description>Development Guidelines Write codes with heart. Pursue clean, simplified and extremely elegant codes. Agree with concepts in &amp;lt;Refactoring: Improving the Design of Existing Code&amp;gt; and &amp;lt;Clean Code: A Handbook of Agile Software Craftsmanship&amp;gt;. Be familiar with codes already had, to keep consistent with the style and use. Highly reusable, no duplicated codes or configurations. Delete codes out of use in time. Contributor Covenant Submitting of Conduct Make sure all the test cases are passed, Make sure .</description></item><item><title>Apache ShenYu Committer</title><link>/community/committer/</link><pubDate>Tue, 09 Apr 2019 00:00:00 +0000</pubDate><guid>/community/committer/</guid><description>Committer Promotion After you have made a lot of contributions, the community will nominate. Become a committer you will have
Permissions written by Apache ShenYu repository Idea is used legally Committer Responsibilities Develop new features; Refactor codes; Review pull requests reliably and in time; Consider and accept feature requests; Answer questions; Update documentation and example; Improve processes and tools; Guide new contributors join community. Committer Routine A committer needs to review every day the Pull Request and issue list to be processed by the community, and assign a suitable committer, that is, Assignee.</description></item><item><title>Apache ShenYu Contributor</title><link>/community/contributor/</link><pubDate>Tue, 09 Apr 2019 00:00:00 +0000</pubDate><guid>/community/contributor/</guid><description>You can report a bug, submit a new function enhancement suggestion, or submit a pull request directly.
Submit an Issue Before submitting an issue, please go through a comprehensive search to make sure the problem cannot be solved just by searching. Check the Issue List to make sure the problem is not repeated. Create a new issue and choose the type of issue. Define the issue with a clear and descriptive title.</description></item><item><title>A multilingual HTTP client</title><link>/projects/shenyu-2.3.0/developer-soul-client/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/developer-soul-client/</guid><description> Description This document focuses on how to access gateways for HTTP services in other languages. How to customize the development of soul-http-client. Customize Http Client Request Method: POST Request Path: http://soul-admin/soul-client/springmvc-register, soul-admin represents IP + Port of admin Request Params：passing JSON type parameters through the body. { &amp;quot;appName&amp;quot;: &amp;quot;xxx&amp;quot;, //required &amp;quot;context&amp;quot;: &amp;quot;/xxx&amp;quot;, //required &amp;quot;path&amp;quot;: &amp;quot;xxx&amp;quot;, //required &amp;quot;pathDesc&amp;quot;: &amp;quot;xxx&amp;quot;, &amp;quot;rpcType&amp;quot;: &amp;quot;http&amp;quot;, //required &amp;quot;host&amp;quot;: &amp;quot;xxx&amp;quot;, //required &amp;quot;port&amp;quot;: xxx, //required &amp;quot;ruleName&amp;quot;: &amp;quot;xxx&amp;quot;, //required &amp;quot;enabled&amp;quot;: &amp;quot;true&amp;quot;, //required &amp;quot;registerMetaData&amp;quot;: &amp;quot;true&amp;quot; //required }</description></item><item><title>A multilingual HTTP client</title><link>/projects/shenyu/developer-shenyu-client/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu/developer-shenyu-client/</guid><description> Description This document focuses on how to access gateways for HTTP services in other languages. How to customize the development of shenyu-http-client. Customize Http Client Request Method: POST Request Path: http://soul-admin/soul-client/springmvc-register, shenyu-admin represents IP + Port of admin Request Params：passing JSON type parameters through the body. { &amp;quot;appName&amp;quot;: &amp;quot;xxx&amp;quot;, //required &amp;quot;context&amp;quot;: &amp;quot;/xxx&amp;quot;, //required &amp;quot;path&amp;quot;: &amp;quot;xxx&amp;quot;, //required &amp;quot;pathDesc&amp;quot;: &amp;quot;xxx&amp;quot;, &amp;quot;rpcType&amp;quot;: &amp;quot;http&amp;quot;, //required &amp;quot;host&amp;quot;: &amp;quot;xxx&amp;quot;, //required &amp;quot;port&amp;quot;: xxx, //required &amp;quot;ruleName&amp;quot;: &amp;quot;xxx&amp;quot;, //required &amp;quot;enabled&amp;quot;: &amp;quot;true&amp;quot;, //required &amp;quot;registerMetaData&amp;quot;: &amp;quot;true&amp;quot; //required }</description></item><item><title>Apache ShenYu Admin Database Design</title><link>/projects/shenyu/database-design/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu/database-design/</guid><description>Apache Shenyu Admin is the management system of the gateway, which can manage all plugins, selectors and rules visually, set users, roles and resources.
Plugin, Selector And Rule Plugin: ShenYu uses the plugin design idea to realize the hot plug of the plugin, which is easy to expand. Built-in rich plugins, including RPC proxy, circuit breaker and current limiting, authority and certification, monitoring, and more. Selector: Each plugin can set multiple selectors to carry out preliminary filtering of traffic.</description></item><item><title>Apache ShenYu Introduction</title><link>/projects/shenyu/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu/overview/</guid><description>What is the Apache ShenYu? This is an asynchronous, high-performance, cross-language, responsive API gateway.
Features Support various languages (http protocol), support Dubbo, Spring Cloud, gRPC, Motan, Sofa, Tars and other protocols. Plugin design idea, plugin hot swap, easy to expand. Flexible flow filtering to meet various flow control. Built-in rich plugin support, authentication, limiting, fuse, firewall, etc. Dynamic flow configuration, high performance. Support cluster deployment, A/B Test, blue-green release.</description></item><item><title>Apache ShenYu Issue And Pull Request</title><link>/community/issue-pr/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/community/issue-pr/</guid><description>Create Issues If you have any problems, you can choose to create an issue to describe.
It has 4 types which are: Bug Report, Feature Request, Question and Task.
Please follow the template for each type, if the more detailed your information is, the more it will help to solve your problem.
Commit Messages Format is : &amp;lt;type&amp;gt; (&amp;lt;module&amp;gt;) : &amp;lt;body&amp;gt;.
&amp;lt;type&amp;gt;: Define your modify type, Including but not limited to the following:</description></item><item><title>Apache ShenYu Subscribe Email</title><link>/community/subscribe-email/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/community/subscribe-email/</guid><description>During the process of using Apache ShenYu, if there is any problem, suggestion or new idea, you can use Apache mailing-list to participate in the community construction.
1.Send e-mail to subscribe.
Use your mailbox to send an e-mail to dev-subscribe@shenyu.apache.org with any subject or content.
2.Receive and reply the confirmation e-mail.
After Step 1, you will receive a confirmation e-mail from dev-help@shenyu.apache.org (if you have not received that, please check “RSS feeds”, “junk e-mail” or other items).</description></item><item><title>Apache ShenYu Two FA (By Apache ShenYu Committers)</title><link>/community/2fa/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/community/2fa/</guid><description>Two-Factor Authentication(2FA) Two factor authentication (2FA) refers to the authentication method that combines both passport, and an object (credit card, SMS phone, token or biomarkers as fingerprint) to identify a user. To ensure the security of the committer’s account, we need you to enable 2FA to sign in and contribute codes on GitHub.
More details, please refer to 2FA.
To be noticed: If you do not enable 2FA, you will be removed from the project and unable to access our repositories and the fork from our private repository.</description></item><item><title>Application Client Access</title><link>/projects/shenyu/register-center-design/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu/register-center-design/</guid><description>Application client access means to access your microservice to ShenYu gateway, currently supports HTTP, Dubbo, Spring Cloud, gRPC, Motan, Sofa, Tars and other protocols access.
Connecting the application client to ShenYu gateway is realized through the registration center, which involves the registration of the client and the synchronization of the server data. The registry supports HTTP, ZooKeeper, Etcd, Consul, and Nacos.
Refer to the client access configuration in the user documentation for Application Client Access Config .</description></item><item><title>Application Client Access Config</title><link>/projects/shenyu/register-center-access/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu/register-center-access/</guid><description>Application client access means to access your microservice to ShenYu gateway, currently supports HTTP, Dubbo, Spring Cloud, gRPC, Motan, Sofa, Tars and other protocols access.
Connecting the application client to ShenYu gateway is realized through the registration center, which involves the registration of the client and the synchronization of the server data. The registry supports HTTP, ZooKeeper, Etcd, Consul, and Nacos.
This article describes how to configure the application client to access the Apache ShenYu gateway.</description></item><item><title>Authority Management</title><link>/projects/shenyu/authority-management/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu/authority-management/</guid><description>Explanation Manage and control the permissions of requests passing through the Apache ShenYu gateway. Generate AK/SK and use it with the Sign plugin to achieve precise authority control based on URI level. Tutorial First, we can add a piece of authentication information in BasicConfig - Authentication Then configure this authentication information AppName：The application name associated with this account, it can can fill in or choose (data comes from the application name configured in the Metadata).</description></item><item><title>Binary Packages Deployment</title><link>/projects/shenyu/deployment-package/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu/deployment-package/</guid><description>This article introduces the deployment of the Apache ShenYu gateway using the binary packages.
Start Apache ShenYu Admin download apache-shenyu-incubating-2.4.0-admin-bin.tar.gz
unzip apache-shenyu-incubating-2.4.0-admin-bin.tar.gz。 go to the bin directory.
use h2 to store data：
&amp;gt; windows: start.bat --spring.profiles.active = h2 &amp;gt; linux: ./start.sh --spring.profiles.active = h2 use MySQL to store data, go to the /conf directory, and modify the configuration of mysql in application.yaml.
&amp;gt; windows: start.bat &amp;gt; linux: .</description></item><item><title>Configuration Flow Introduction</title><link>/projects/shenyu-2.3.0/config/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/config/</guid><description>Description This article introduces the flow of synchronizing to the gateway after the data operation of admin backend system. Usage User can arbitrary modify data in soul-admin backend and this will immediately synchronize to the jvm memory of the gateway. Synchronize the plugin data of soul,selector,rule data, metadata, signature data, etc. All the rules of plugin selectors are dynamically configured and take effect immediately without restarting the service.</description></item><item><title>Configuration Flow Introduction</title><link>/projects/shenyu/config/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu/config/</guid><description>Description This article introduces the flow of synchronizing to the gateway after the data operation of shenyu-admin backend system. Usage User can arbitrary modify data in shenyu-admin backend and this will immediately synchronize to the jvm memory of the gateway. Synchronize the plugin data of ShenYu, selector,rule data, metadata, signature data, etc. All the rules of plugin selectors are dynamically configured and take effect immediately without restarting the service.</description></item><item><title>Context-Path Plugin</title><link>/projects/shenyu/context-path-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu/context-path-plugin/</guid><description>Explanation When making invokes to the target service, Apache ShenYu Gateway also allows users to customize the contextPath using the context_path plugin. Plugin Setting In shenyu-admin &amp;ndash;&amp;gt; BasicConfig &amp;ndash;&amp;gt; Plugin &amp;ndash;&amp;gt; context_path , set to enable. Introduce context_path support in the pom.xml file of the gateway. If the user don&amp;rsquo;t use, please disable the plugin in the background. &amp;lt;!-- apache shenyu context_path plugin start--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.</description></item><item><title>Contributors</title><link>/community/contributor-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/community/contributor-list/</guid><description>Hundreds of people have contributed articles and code to Apache ShenYu so far, thank you very much!
If you want to contribute, you can go to the Apache ShenYu and fork it.</description></item><item><title>Custom Condition Match</title><link>/projects/shenyu/custom-condition-match/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu/custom-condition-match/</guid><description>Explanation Before custom development, please customize and build the gateway environment first, please refer to: custom deployment
This article describes how to customize the extension of org.apache.shenyu.plugin.base.condition.strategy.MatchStrategy.
Extension Create a new class ${you class}，implements org.apache.shenyu.plugin.base.condition.strategy.MatchStrategy
public class ${you class} implements MatchStrategy { @Override public Boolean match(final List&amp;lt;ConditionData&amp;gt; conditionDataList, final ServerWebExchange exchange) { //coding and return return true; } } In the project resources directory，Create a new META-INF/shenyu directory， and the new file name is : org.</description></item><item><title>Custom Deployment</title><link>/projects/shenyu/deployment-custom/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu/deployment-custom/</guid><description>This article describes how to build your own gateway based on Apache ShenYu.
Start Apache ShenYu Admin docker reference docker deployment Apache ShenYu Admin
liunx/windows reference binary packages deployment Apache ShenYu Admin
Build your own gateway (recommended) first create an empty springboot project, you can refer to shenyu-bootstrap, or you can create it on spring official website.
introduce the following jar package:
&amp;lt;dependencies&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.</description></item><item><title>Custom Filter</title><link>/projects/shenyu/custom-filter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu/custom-filter/</guid><description>Description This doc shows a demo for how to extend org.springframework.web.server.WebFliter. CORS Support org.apache.shenyu.web.filter.CrossFilter is designed for WebFilter implementation. public class CrossFilter implements WebFilter { private static final String ALLOWED_HEADERS = &amp;quot;x-requested-with, authorization, Content-Type, Authorization, credential, X-XSRF-TOKEN,token,username,client&amp;quot;; private static final String ALLOWED_METHODS = &amp;quot;*&amp;quot;; private static final String ALLOWED_ORIGIN = &amp;quot;*&amp;quot;; private static final String ALLOWED_EXPOSE = &amp;quot;*&amp;quot;; private static final String MAX_AGE = &amp;quot;18000&amp;quot;; @Override @SuppressWarnings(&amp;quot;all&amp;quot;) public Mono&amp;lt;Void&amp;gt; filter(final ServerWebExchange exchange, final WebFilterChain chain) { ServerHttpRequest request = exchange.</description></item><item><title>Custom Plugin</title><link>/projects/shenyu-2.3.0/custom-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/custom-plugin/</guid><description>Description Plugins are core executors of soul gateway. Every plugin handles matched requests when enabled. There are two kinds of plugins in the soul gateway. The first type is a call chain with a single responsibility, and traffic cannot be customized. The other one can do its own chain of responsibility for matched traffic. You could reference from soul-plugin module and develop plugins by yourself. Please fire pull requests of your wonderful plugins without hesitate.</description></item><item><title>Custom Plugin</title><link>/projects/shenyu/custom-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu/custom-plugin/</guid><description>Description Plugins are core executors of Apache ShenYu gateway. Every plugin handles matched requests when enabled. There are two kinds of plugins in the Apache ShenYu gateway. The first type is a chain with single responsibility, and can not custom filtering of traffic. The other one can do its own chain of responsibility for matched traffic. You could reference from shenyu-plugin module and develop plugins by yourself.</description></item><item><title>Custom Response</title><link>/projects/shenyu-2.3.0/custom-result/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/custom-result/</guid><description>Description This doc offers examples for customising response structure. The response body structure in gateways should be unified, it is recommended for specify yours. Default Implementation The default implementation class is org.dromara.soul.plugin.api.result.DefaultSoulResult. Following is the response structure. public class SoulDefaultEntity implements Serializable { private static final long serialVersionUID = -2792556188993845048L; private Integer code; private String message; private Object data; } The returned json as follows: { &amp;quot;code&amp;quot;: -100, //response code,</description></item><item><title>Custom Response</title><link>/projects/shenyu/custom-result/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu/custom-result/</guid><description>Description This doc offers examples for customising response structure in Apache ShenYu gateway. The response body structure in gateways should be unified, it is recommended for specify yours. Default Implementation The default implementation class is org.apache.shenyu.plugin.api.result.DefaultShenyuResult. Following is the response structure: public class ShenyuDefaultEntity implements Serializable { private static final long serialVersionUID = -2792556188993845048L; private Integer code; private String message; private Object data; } The returned json as follows:</description></item><item><title>Custom Sign Algorithm</title><link>/projects/shenyu-2.3.0/custom-sign-algorithm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/custom-sign-algorithm/</guid><description>Description Users can customize the signature authentication algorithm to achieve verification. Extension The default implementation is org.dromara.soul.plugin.sign.service.DefaultSignService. Declare a new class named &amp;ldquo;A&amp;rdquo; and implements org.dromara.soul.plugin.api.SignService. public interface SignService { /** * Sign verify pair. * * @param exchange the exchange * @return the pair */ Pair&amp;lt;Boolean, String&amp;gt; signVerify(ServerWebExchange exchange); } When returning true in Pair, the sign verification passes. If there&amp;rsquo;s false, the String in Pair will be return to the frontend to show.</description></item><item><title>Custom Sign Algorithm</title><link>/projects/shenyu/custom-sign-algorithm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu/custom-sign-algorithm/</guid><description>Description Users can customize the signature authentication algorithm to achieve verification. Extension The default implementation is org.apache.shenyu.plugin.sign.service.DefaultSignService. Declare a new class named CustomSignService and implements org.apache.shenyu.plugin.api.SignService. public interface SignService { /** * Sign verify pair. * * @param exchange the exchange * @return the pair */ Pair&amp;lt;Boolean, String&amp;gt; signVerify(ServerWebExchange exchange); } When returning true in Pair, the sign verification passes. If there&amp;rsquo;s false, the String in Pair will be return to the frontend to show.</description></item><item><title>Data Synchronization Config</title><link>/projects/shenyu/use-data-sync/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu/use-data-sync/</guid><description>This document focuses on how to use different data synchronization strategies. Data synchronization refers to the strategy used to synchronize data to ShenYu gateway after shenyu-admin background operation data. ShenYu gateway currently supports ZooKeeper, WebSocket, HTTP Long Polling, Nacos, Etcd and Consul for data synchronization.
For details about the data synchronization principles, see Data Synchronization Design in the design document.
WebSocket Synchronization Config（default strategy, recommend） Apache ShenYu gateway config Add these dependencies in pom.</description></item><item><title>Data Synchronization Design</title><link>/projects/shenyu-2.3.0/data-sync/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/data-sync/</guid><description>Description This article mainly explains three ways of database synchronization and their principles.
Preface Gateway is the entrance of request and it is a very important part in micro service architecture, therefore the importance of gateway high availability is self-evident. When we use gateway, we have to change configuration such as flow rule, route rule for satisfying business requirement. Therefore, the dynamic configuration of the gateway is an important factor to ensure the high availability of the gateway.</description></item><item><title>Data Synchronization Design</title><link>/projects/shenyu/data-sync/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu/data-sync/</guid><description>This document explains the principle of data synchronization. Data synchronization refers to the strategy used to synchronize data to ShenYu gateway after shenyu-admin background operation data. ShenYu gateway currently supports ZooKeeper, WebSocket, HTTP Long Polling, Nacos, Etcd and Consul for data synchronization.
See Data Synchronization Configuration for configuration information about data synchronization.
Preface Gateway is the entrance of request and it is a very important part in micro service architecture, therefore the importance of gateway high availability is self-evident.</description></item><item><title>Database Design</title><link>/projects/shenyu-2.3.0/database-design/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/database-design/</guid><description>Plugin use database to store plugin, selector, rule configuration data and relationship.
The Database Table UML Diagram: Detailed design:
One plugin corresponds to multiple selectors,one selector corresponds to multiple rules.
One selector corresponds to multiple match conditions,one rule corresponds to multiple match conditions.
Each rule handles differently in corresponding plugin according to field handler,field handler is a kind of data of JSON string type.You can view detail during the use of admin.</description></item><item><title>Dict Management</title><link>/projects/shenyu-2.3.0/dictionary-management/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/dictionary-management/</guid><description>Explanation Dictionary management is primarily used to maintain and manage common data dictionaries. Table design sql CREATE TABLE IF NOT EXISTS `soul_dict` ( `id` varchar(128) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT &#39;primary key id&#39;, `type` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT &#39;type&#39;, `dict_code` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT &#39;dictionary encoding&#39;, `dict_name` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT &#39;dictionary name&#39;, `dict_value` varchar(100) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT &#39;dictionary value&#39;, `desc` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT &#39;dictionary description or remarks&#39;, `sort` int(4) NOT NULL COMMENT &#39;sort&#39;, `enabled` tinyint(4) DEFAULT NULL COMMENT &#39;whether it is enabled&#39;, `date_created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#39;create time&#39;, `date_updated` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT &#39;update time&#39;, PRIMARY KEY (`id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci; The current usage scenario is when the plugin handle configuring the data_type=3 (select box) eg.</description></item><item><title>Dict Management</title><link>/projects/shenyu/dictionary-management/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu/dictionary-management/</guid><description>Explanation This document will introduce the use of dictionary management in the Apache ShenYu background management system. Dictionary management is primarily used to maintain and manage common data dictionaries.
Please refer to the deployment document, choose a way to start shenyu-admin. For example, local deployment. After startup, visit http://localhost:9095, the default username and password are: admin and 123456 .
The current usage scenario is in the pluginHandle , when the data type is selected as the dropdown:</description></item><item><title>Divide Plugin</title><link>/projects/shenyu-2.3.0/divide-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/divide-plugin/</guid><description>Explanation Divide is the core processing plugin for gateway to process http requests. Plugin Setting Enable plugin, soul-admin &amp;ndash;&amp;gt; plugin management&amp;ndash;&amp;gt; divide set to enable.
Divide plugin，cooperate with starter to take effect，please refer to：user-http。
&amp;lt;!--if you use http proxy start this--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;soul-spring-boot-starter-plugin-divide&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;soul-spring-boot-starter-plugin-httpclient&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Plugin Detail Divide is a plugin for http forward proxy, and all http requests are called by this plugin in load balancing.</description></item><item><title>Divide Plugin</title><link>/projects/shenyu/divide-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu/divide-plugin/</guid><description>Explanation Divide is the core processing plugin for gateway to process http requests. Plugin Setting Add related dependencies and enable plugin, please refer to: Quick start http
Http client access, please refer to：Http proxy .
Plugin detail The divide plugin is a plugin for forward proxying of http. All requests of the http type are called by the plugin for load balancing.
After the client connects to the Apache ShenYu gateway, it will automatically register the selector and rule information.</description></item><item><title>Doc Download</title><link>/projects/shenyu-2.3.0/download/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/download/</guid><description>PDF English 中文</description></item><item><title>Docker Deployment</title><link>/projects/shenyu/deployment-docker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu/deployment-docker/</guid><description>This article introduces the use of docker to deploy the Apache ShenYu gateway.
Start Apache ShenYu Admin &amp;gt; docker pull apache/shenyu-admin &amp;gt; docker network create shenyu use h2 to store data:
&amp;gt; docker run -d -p 9095:9095 --net shenyu apache/shenyu-admin use MySQL to store data, copy mysql-connector.jar to /$(your_work_dir)/ext-lib：
docker run -v /${your_work_dir}/ext-lib:/opt/shenyu-admin/ext-lib -e &amp;quot;SPRING_PROFILES_ACTIVE=mysql&amp;quot; -e &amp;quot;spring.datasource.url=jdbc:mysql://${your_ip_port}/shenyu?useUnicode=true&amp;amp;characterEncoding=utf-8&amp;amp;useSSL=false&amp;quot; -e &amp;quot;spring.datasource.user=${your_username}&amp;quot; -e &amp;quot;spring.datasource.password=${your_password}&amp;quot; -d -p 9095:9095 --net shenyu apache/shenyu-admin another way is to put the application.</description></item><item><title>Download</title><link>/projects/shenyu/download/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu/download/</guid><description>Latest Releases Apache ShenYu (incubating) is released as source code tarballs with corresponding binary tarballs for convenience.
The downloads are distributed via mirror sites and should be checked for tampering using GPG or SHA-512.
Apache ShenYu (incubating) - Version: 2.4.0 (Release Date: Aug 8, 2021) Source Codes [zip] [asc] [sha512]
ShenYu-Admin Binary Distribution [tar] [asc] [sha512]
ShenYu-Bootstrap Binary Distribution [tar] [asc] [sha512]
Verify the Releases PGP signatures KEYS</description></item><item><title>Dubbo Plugin</title><link>/projects/shenyu-2.3.0/dubbo-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/dubbo-plugin/</guid><description>Explanation Dubbo is a plugin that converts http protocol into Dubbo protocol and it is also the key for gateway to realize dubbo generic service. Dubbo plugin needs to cooperate with metadata to realize dubbo calls, please refer to: metaData. Apache dubbo and alibaba dubbo users both use the same plugin. &amp;lt;!--if you use dubbo start this--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;soul-spring-boot-starter-plugin-alibab-dubbo&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;soul-spring-boot-starter-plugin-apache-dubbo&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Plugin Setting In soul-admin &amp;ndash;&amp;gt; plugin management-&amp;gt; dubbo setting enable.</description></item><item><title>Dubbo Plugin</title><link>/projects/shenyu/dubbo-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu/dubbo-plugin/</guid><description>Explanation Dubbo is a plugin that converts http protocol into Dubbo protocol and it is also the key for gateway to realize dubbo generic service. Dubbo plugin needs to cooperate with metadata to realize dubbo calls. Apache Dubbo and Alibaba Dubbo users both use the same plugin. Plugin Setting Add related dependencies and enable plugin, please refer to: Quick start with Dubbo .
Dubbo client access, please refer to: Dubbo Proxy .</description></item><item><title>Dubbo Proxy</title><link>/projects/shenyu/dubbo-proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu/dubbo-proxy/</guid><description>This document is intended to help the Dubbo service access the Apache ShenYu gateway. The Apache ShenYu gateway uses the Dubbo plugin to handle dubbo service.
Support Alibaba Dubbo(&amp;lt; 2.7.x) and Apache Dubbo (&amp;gt;=2.7.x).
Before the connection, start shenyu-admin correctly, start Dubbo plugin, and add related dependencies on the gateway and Dubbo application client. Refer to the previous Quick start with Dubbo .
For details about client access configuration, see Application Client Access Config .</description></item><item><title>Environment Setup</title><link>/projects/shenyu-2.3.0/soul-set-up/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/soul-set-up/</guid><description>Features Soul is an open source plugin framework, which is flexibility and extensibility since 2.2.0 version. With soul you can easily create application with your own gateway. System Requirement: JDK 1.8+, Mysql 5.5.20 +. Soul-Admin remote download 2.3.0 download soul-admin-bin-2.3.0-RELEASE.tar.gz
tar soul-admin-bin-2.3.0-RELEASE.tar.gz. cd /bin.
use h2 store.
&amp;gt; windwos : start.bat --spring.profiles.active = h2 &amp;gt; linux : ./start.sh --spring.profiles.active = h2 use mysql store.</description></item><item><title>Environment Setup</title><link>/projects/shenyu/shenyu-set-up/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu/shenyu-set-up/</guid><description>Features Apache ShenYu is an open source plugin framework, which is flexibility and extensibility since 2.2.0 version. With shenyu you can easily create application with your own gateway. System Requirement: JDK 1.8+, Mysql 5.5.20 +. Shenyu-Admin remote download 2.3.0 download shenyu-admin-bin-2.3.0-RELEASE.tar.gz tar shenyu-admin-bin-2.3.0-RELEASE.tar.gz. cd /bin. use h2 store. &amp;gt; windwos : start.bat --spring.profiles.active = h2 &amp;gt; linux : ./start.sh --spring.profiles.active = h2 use mysql store. cd /conf and then modify</description></item><item><title>Fetching Correct IP Address And Host</title><link>/projects/shenyu-2.3.0/custom-parsing-ip-and-host/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/custom-parsing-ip-and-host/</guid><description>Description This doc demonstrates how to get correct IP address and host when soul serves behind nginx reverse proxy. After fetched real IP and host, you can match them with plugins and selectors. Default Implementation The embedded implementation in soul is :org.dromara.soul.web.forwarde.ForwardedRemoteAddressResolver。
You need to config X-Forwarded-For in nginx first to get correct IP address and host.
Implement through a Plugin Declare a new class named &amp;ldquo;A&amp;rdquo; and implements org.</description></item><item><title>Fetching Correct IP Address And Host</title><link>/projects/shenyu/custom-parsing-ip-and-host/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu/custom-parsing-ip-and-host/</guid><description>Description This doc demonstrates how to get correct IP address and host when Apache ShenYu serves behind nginx reverse proxy. After fetched real IP and host, you can match them with plugins and selectors. Default Implementation The embedded implementation in Apache ShenYu is :org.apache.shenyu.web.forward.ForwardedRemoteAddressResolver.
You need to config X-Forwarded-For in nginx first to get correct IP address and host.
Implement through a Plugin Declare a new class named CustomRemoteAddressResolver and implements org.</description></item><item><title>File Upload And Download</title><link>/projects/shenyu/file-and-image/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu/file-and-image/</guid><description> description This doc gives a brief description for upload and download files using Apache ShenYu. File Upload The default file size limit is 10M. For custom limitation, use--file.size with an integer variable. e.g.--file.size = 30 Upload your files just as way you did before File Download Apache ShenYu supports download files in stream. There is no need to change anything.</description></item><item><title>File Uploading And Downloading</title><link>/projects/shenyu-2.3.0/file-and-image/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/file-and-image/</guid><description> description This doc gives a brief description for uploading and downloading files using soul. File Uploading The default file size limit is 10M. For custom limitation, use--file.size with an integer variable. e.g.--file.size = 30 Upload your files just as way you did before File Downloading Soul supports downloading files in streams. There is no need to change anything.</description></item><item><title>Filter Extension</title><link>/projects/shenyu-2.3.0/custom-filter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/custom-filter/</guid><description>Description This doc shows a demo for how to extend org.springframework.web.server.WebFliter. CORS Support org.dromara.soul.bootstrap.cors.CrossFilter is designed for WebFilter implementation. public class CrossFilter implements WebFilter { private static final String ALLOWED_HEADERS = &amp;quot;x-requested-with, authorization, Content-Type, Authorization, credential, X-XSRF-TOKEN,token,username,client&amp;quot;; private static final String ALLOWED_METHODS = &amp;quot;*&amp;quot;; private static final String ALLOWED_ORIGIN = &amp;quot;*&amp;quot;; private static final String ALLOWED_EXPOSE = &amp;quot;*&amp;quot;; private static final String MAX_AGE = &amp;quot;18000&amp;quot;; @Override @SuppressWarnings(&amp;quot;all&amp;quot;) public Mono&amp;lt;Void&amp;gt; filter(final ServerWebExchange exchange, final WebFilterChain chain) { ServerHttpRequest request = exchange.</description></item><item><title>Flow Control</title><link>/projects/shenyu/flow-control/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu/flow-control/</guid><description>ShenYu gateway realizes flow control through plugins, selectors and rules. For related data structure, please refer to the previous Apache ShenYu Admin Database Design .
Plugin In Apache ShenYu Admin System, each plugin uses Handle (JSON format) fields to represent different processing, and the plugin processing is used to manage and edit the custom processing fields in the JSON.
The main purpose of this feature is to enable plugins to handle templated configurations.</description></item><item><title>Helm Deployment</title><link>/projects/shenyu/deployment-helm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu/deployment-helm/</guid><description>This article introduces the use of helm to deploy the Apache ShenYu gateway.</description></item><item><title>How to vote Apache ShenYu Committer</title><link>/community/vote-committer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/community/vote-committer/</guid><description>1. Start the discussion and vote in private@shenyu.apache.org, Only current PPMC member could nominate.
Example： To：private@shenyu.apache.org Title： [VOTE] New committer:(nominee) Content： Hi, everyone This is ^a formal vote^ about inviting (nominee)as our new committer. He/She really made an effort to improve ShenYu Parser and fix many issues. The following links will direct you to his/her work. https://github.com/apache/incubator-shenyu/pull/1 https://github.com/apache/incubator-shenyu/pull/2 https://github.com/apache/incubator-shenyu/pull/3 https://github.com/apache/incubator-shenyu/pull/4 [^ means these words are subject to change in different case] 2.</description></item><item><title>Http Proxy</title><link>/projects/shenyu/http-proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu/http-proxy/</guid><description>This document is intended to help the Http service access the Apache ShenYu gateway. The Apache ShenYu gateway uses the Divide plugin to handle Http requests.
Before the connection, start shenyu-admin correctly, start Divide plugin, and add related dependencies on the gateway and Http application client. Refer to the previous Quick start with Http .
For details about client access configuration, see Application Client Access Config .
For details about data synchronization configurations, see Data Synchronization Config .</description></item><item><title>Hystrix Plugin</title><link>/projects/shenyu-2.3.0/hystrix-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/hystrix-plugin/</guid><description>Explanation Hystrix plugin is the core implementation used by gateway to fuse traffic. Use semaphores to process requests. Plugin Setting In soul-admin &amp;ndash;&amp;gt; plugin management &amp;ndash;&amp;gt; hystrix, set to enable. If the user don&amp;rsquo;t use, please disable the plugin in the background. Plugin Instruction Introduce hystrix dependency in the pom.xml file of the gateway. &amp;lt;!-- soul hystrix plugin start--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;soul-spring-boot-starter-plugin-hystrix&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!</description></item><item><title>Hystrix Plugin</title><link>/projects/shenyu/hystrix-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu/hystrix-plugin/</guid><description>Description Hystrix plugin is the core implementation used by gateway to fuse traffic. Support thread and semaphore . Plugin Setting Select a mode to start shenyu-admin. For details, see deployment. For example, with Local Deployment starts the Apache ShenYu background management system.
In BasicConfig &amp;ndash;&amp;gt; Plugin &amp;ndash;&amp;gt; hystrix, set to enable. If the user don&amp;rsquo;t use, please disable the plugin in the background. Add hystrix plugin dependency Add hystrix dependency in the pom.</description></item><item><title>Integrate Http with soul gateway</title><link>/projects/shenyu-2.3.0/http-proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/http-proxy/</guid><description>Features This chapter is a guide about integrating Http service with soul gateway. Soul gateway uses divide plugin handling http request, pls enable it in soul-admin background. Please start soul-admin successfully before integrating and Environment Setup is Ok. Configure soul gateway as Http proxy. Add these dependencies in gateway&amp;rsquo;s pom.xml: &amp;lt;!--if you use http proxy start this--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;soul-spring-boot-starter-plugin-divide&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;soul-spring-boot-starter-plugin-httpclient&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${last.</description></item><item><title>Integrate dubbo with soul gateway</title><link>/projects/shenyu-2.3.0/dubbo-proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/dubbo-proxy/</guid><description>Features This chapter is a guide about integrating dubbo service with soul gateway. Support Alibaba Dubbo(&amp;lt; 2.7.x) and Apache Dubbo (&amp;gt;=2.7.x). Please start soul-admin successfully before integrating, and Environment Setup is Ok. Configure soul gateway as Dubbo proxy Add these dependencies in gateway&amp;rsquo;s pom.xml. Alibaba dubbo user, configure the dubbo version and registry center with yours.
&amp;lt;!--soul alibaba dubbo plugin start--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;soul-spring-boot-starter-plugin-alibaba-dubbo&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!</description></item><item><title>JWT plugin</title><link>/projects/shenyu/jwt-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu/jwt-plugin/</guid><description>Description The jwt plug-in is for the token attribute or authorization of the http request header to carry the attribute value for authentication judgment and judge OAuth2.0 . Plugin Setting Please refer to the deployment document, choose a way to start shenyu-admin. For example, through Local Deployment to start the Apache ShenYu management system .
In shenyu-admin BasicConfig &amp;ndash;&amp;gt; plugin -&amp;gt; jwt set to enable. If you don&amp;rsquo;t want to use this function, please disable this plugin in the shenyu-admin.</description></item><item><title>Local Deployment</title><link>/projects/shenyu/deployment-local/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu/deployment-local/</guid><description>This article introduces how to start the Apache ShenYu gateway in the local environment.
Environmental preparation Install JDK1.8+ locally Install Git locally Install Maven locally Choose a development tool, such as IDEA Download the compiled code Download
&amp;gt; git clone https://github.com/apache/incubator-shenyu.git &amp;gt; cd shenyu &amp;gt; mvn clean install -Dmaven.javadoc.skip=true -B -Drat.skip=true -Djacoco.skip=true -DskipITs -DskipTests use the development tool to start org.apache.shenyu.admin.ShenyuAdminBootstrap，Visit http://localhost:9095, the default username and password are: admin and 123456 respectively.</description></item><item><title>Logging Plugin</title><link>/projects/shenyu/logging-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu/logging-plugin/</guid><description>Description When making invokes to the target service, Apache ShenYu gateway also allows users to print the request information in the log that includes the request path, request method, request parameters, response header, response body &amp;hellip;etc. Plugin Setting In shenyu-admin &amp;ndash;&amp;gt; BasicConfig &amp;ndash;&amp;gt; Plugin &amp;ndash;&amp;gt; logging, set to enable. Introduce logging support in the pox.xml file of the gateway. If the user don&amp;rsquo;t use, please disable the plugin in the background.</description></item><item><title>MetaData Concept Design</title><link>/projects/shenyu-2.3.0/meta-data/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/meta-data/</guid><description>Description This article mainly explains the concept,design of metadata and how to connect in the soul gateway. Technical Solutions Add a new table in the database,and data can synchronize to the JVM memory of gateway according to the data synchronization scheme.
Table Structure:
CREATE TABLE IF NOT EXISTS `meta_data` ( `id` varchar(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT &#39;id&#39;, `app_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT &#39;application name&#39;, `path` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT &#39;path,not repeatable&#39;, `path_desc` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT &#39;path description&#39;, `rpc_type` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT &#39;rpc type&#39;, `service_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT &#39;service name&#39;, `method_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT &#39;method name&#39;, `parameter_types` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT &#39;multiple parameter types, split by comma&#39;, `rpc_ext` varchar(1024) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT &#39;rpc extension information,json format&#39;, `date_created` datetime(0) NOT NULL COMMENT &#39;create date&#39;, `date_updated` datetime(0) NOT NULL ON UPDATE CURRENT_TIMESTAMP(0) COMMENT &#39;update date&#39;, `enabled` tinyint(4) NOT NULL DEFAULT 0 COMMENT &#39;enable status&#39;, PRIMARY KEY (`id`) USING BTREE ) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci ROW_FORMAT = Dynamic; Metadata design as below,the most important is using it in dubbo&amp;rsquo;s generalization call.</description></item><item><title>MetaData Concept Design</title><link>/projects/shenyu/meta-data/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu/meta-data/</guid><description>Description This article mainly explains the concept,design of metadata and how to connect in the Apache ShenYu Gateway. Technical Solutions Add a new table in the database,and data can synchronize to the JVM memory of gateway according to the data synchronization scheme.
Table Structure:
CREATE TABLE IF NOT EXISTS `meta_data` ( `id` varchar(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT &#39;id&#39;, `app_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT &#39;application name&#39;, `path` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT &#39;path,not repeatable&#39;, `path_desc` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT &#39;path description&#39;, `rpc_type` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT &#39;rpc type&#39;, `service_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT &#39;service name&#39;, `method_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT &#39;method name&#39;, `parameter_types` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT &#39;multiple parameter types, split by comma&#39;, `rpc_ext` varchar(1024) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT &#39;rpc extension information,json format&#39;, `date_created` datetime(0) NOT NULL COMMENT &#39;create date&#39;, `date_updated` datetime(0) NOT NULL ON UPDATE CURRENT_TIMESTAMP(0) COMMENT &#39;update date&#39;, `enabled` tinyint(4) NOT NULL DEFAULT 0 COMMENT &#39;enable status&#39;, PRIMARY KEY (`id`) USING BTREE ) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci ROW_FORMAT = Dynamic; Metadata design as below,the most important is using it in dubbo&amp;rsquo;s generalization call.</description></item><item><title>ModifyResponse Plugin</title><link>/projects/shenyu/modify-response-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu/modify-response-plugin/</guid><description>Description modifyResponse is a native plugin of Apache ShenYu gateway and is used to edit response header and body and statusCode. Plugin Setting In shenyu-admin &amp;ndash;&amp;gt; BasicConfig &amp;ndash;&amp;gt; Plugin &amp;ndash;&amp;gt; modifyResponse , set to enable. Plugin Use Introduce modifyResponse dependency in the pom.xml file of the gateway. &amp;lt;!-- apache shenyu modify response plugin start--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.shenyu&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;shenyu-spring-boot-starter-plugin-modify-response&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${project.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- apache shenyu modify response plugin end--&amp;gt; Selectors and rules, please refer to:Selector And Rule Config。 only those matched requests can be modified response.</description></item><item><title>Monitor Plugin</title><link>/projects/shenyu-2.3.0/monitor-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/monitor-plugin/</guid><description>Explanation Monitor plugin is used to monitor its own running status(JVM-related) by gateway, include request response delay, QPS, TPS, and other related metrics. Technical Solutions Flow Diagram Make even tracking in soul gateway by asynchronous or synchronous mode.
The prometheus server pulls metrics&amp;rsquo; through http request, and then displays it by Grafana.
Plugin Setting In soul-admin&amp;ndash;&amp;gt; plugin management-&amp;gt; monitor, set to enable.</description></item><item><title>Monitor Plugin</title><link>/projects/shenyu/monitor-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu/monitor-plugin/</guid><description>Description Monitor plugin is used to monitor its own running status(JVM-related) by gateway, include request response delay, QPS, TPS, and other related metrics. Technical Solutions Flow Diagram Make even tracking in ShenYu Gateway by asynchronous or synchronous mode.
The prometheus server pulls metrics&amp;rsquo; through http request, and then displays it by Grafana.
Plugin Setting In shenyu-admin&amp;ndash;&amp;gt; BasicConfig &amp;ndash;&amp;gt; Plugin &amp;ndash;&amp;gt; monitor, set to enable.</description></item><item><title>Motan Plugin</title><link>/projects/shenyu/motan-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu/motan-plugin/</guid><description>Description The motan plugin is a plugin that converts the Http protocol into the motan protocol. Plugin Setting Add related dependencies and enable plugin, please refer to: Quick start with Motan .
Motan client access, please refer to: Motan Proxy .
Plugin Detail After the client accesses the Apache ShenYu gateway, it will automatically register the selector and rule information.
You can see it in PluginList -&amp;gt; rpc proxy -&amp;gt; motan.</description></item><item><title>Motan Proxy</title><link>/projects/shenyu/motan-proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu/motan-proxy/</guid><description>This document is intended to help the Motan service access the Apache ShenYu gateway. The Apache ShenYu gateway uses the Motan plugin to handle motan service.
Before the connection, start shenyu-admin correctly, start Motan plugin, and add related dependencies on the gateway and Motan application client. Refer to the previous Quick start with Motan .
For details about client access configuration, see Application Client Access Config .
For details about data synchronization configurations, see Data Synchronization Config .</description></item><item><title>OAuth2 Plugin</title><link>/projects/shenyu/oauth2-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu/oauth2-plugin/</guid><description>Description The OAuth2 plugin is implemented using Webflux OAuth2, used to support OAuth protocol. Plugin Setting Please refer to the deployment document, choose a way to start shenyu-admin. For example, Local Deployment.
In shenyu-admin BasicConfig &amp;ndash;&amp;gt; plugin -&amp;gt; oauth2 set to enable. If you don&amp;rsquo;t want to use this function, please disable this plugin in the shenyu-admin. Add configuration mode in plugin editing. Plugin Use Add support for oauth2 to the pom file of the gateway &amp;lt;!</description></item><item><title>Param-mapping Plugin</title><link>/projects/shenyu/param-mapping-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu/param-mapping-plugin/</guid><description>Description param_mapping is a native plugin of Apache ShenYu Gateway and is used to edit your request param. Plugin Setting In shenyu-admin &amp;ndash;&amp;gt; BasicConfig &amp;ndash;&amp;gt; Plugin &amp;ndash;&amp;gt; param_mapping , set to enable. Plugin Use Introduce param_mapping dependency in the pom.xml file of the gateway. &amp;lt;!-- apache shenyu param_mapping plugin start--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.shenyu&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;shenyu-spring-boot-starter-plugin-param-mapping&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${project.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- apache shenyu param_mapping plugin end--&amp;gt; Selectors and rules, please refer to:Selector And Rule Config。</description></item><item><title>Plugin Config</title><link>/projects/shenyu/plugin-handle-explanation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu/plugin-handle-explanation/</guid><description>Explanation This document will introduce the use of plugins in the shenyu-admin , including plugin management and plugin handle management.
Please refer to the deployment document, choose a way to start shenyu-admin. For example, local deployment. After startup, visit http://localhost:9095, the default username and password are: admin and 123456 .
Plugin management In the plugin management, you can manage all plugins in a unified manner, such as turning off or turning on plugins:</description></item><item><title>Plugin Context Path Mapping</title><link>/projects/shenyu-2.3.0/context-path-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/context-path-plugin/</guid><description>Explanation When making invokes to the target service, soul Gateway also allows users to customize the context using the context_path plugin. Plugin Setting In soul-admin &amp;ndash;&amp;gt; plugin management &amp;ndash;&amp;gt; context_path, set to enable. Introduce context_path support in the pox.xml file of the gateway. If the user don&amp;rsquo;t use, please disable the plugin in the background. &amp;lt;!-- soul context_path plugin start--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;soul-spring-boot-starter-plugin-context-path&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!</description></item><item><title>Plugin Handle Explanation</title><link>/projects/shenyu-2.3.0/plugin-handle-explanation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/plugin-handle-explanation/</guid><description>Explanation In our Soul-Admin background, each plugin uses the Handle field to represent a different processing, and plugin processing is used to manage and edit custom processing fields in JSON. This feature is mainly used to support the plug-in handling template configuration Table Design sql
CREATE TABLE IF NOT EXISTS `plugin_handle` ( `id` varchar(128) NOT NULL, `plugin_id` varchar(128) NOT NULL COMMENT &#39;plugin id&#39;, `field` varchar(100) NOT NULL COMMENT &#39;field&#39;, `label` varchar(100) DEFAULT NULL COMMENT &#39;label&#39;, `data_type` smallint(6) NOT NULL DEFAULT &#39;1&#39; COMMENT &#39;data type 1 number 2 string 3 select box&#39;, `type` smallint(6) NULL COMMENT &#39;type, 1 means selector, 2 means rule&#39;, `sort` int(4) NULL COMMENT &#39;sort&#39;, `ext_obj` varchar(1024) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT &#39;extra configuration (json format data)&#39;, `date_created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#39;create time&#39;, `date_updated` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT &#39;update time&#39;, PRIMARY KEY (`id`), UNIQUE KEY `plugin_id_field_type` (`plugin_id`,`field`,`type`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE = utf8mb4_unicode_ci ROW_FORMAT = Dynamic; Tutorial eg.</description></item><item><title>Quick start with Dubbo</title><link>/projects/shenyu-2.3.0/quick-start-dubbo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/quick-start-dubbo/</guid><description>This document introduces how to quickly access the Soul Gateway using Dubbo. You can get the code example of this document by clicking here.
Environment to prepare Please refer to the setup and launch soul-admin and soul-bootstrap, In addition, if you use ZooKeeper for Dubbo, you need to download it in advance.
Run the soul-examples-dubbo project Downloadsoul-examples-dubbo, replace the register address in spring-dubbo.xml with your local zk address, such as:</description></item><item><title>Quick start with Dubbo</title><link>/projects/shenyu/quick-start-dubbo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu/quick-start-dubbo/</guid><description>This document introduces how to quickly access the Apache ShenYu gateway using Dubbo. You can get the code example of this document by clicking here.
Environment to prepare Please refer to the deployment to select a way to start shenyu-admin. For example, start the Apache ShenYu gateway management system through local deployment .
After successful startup, you need to open the Dubbo plugin on in the BasicConfig -&amp;gt; Plugin, and set your registry address.</description></item><item><title>Quick start with Http</title><link>/projects/shenyu/quick-start-http/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu/quick-start-http/</guid><description>This document introduces how to quickly access the Apache ShenYu gateway using Http. You can get the code example of this document by clicking here.
Environment to prepare Please refer to the deployment to select a way to start shenyu-admin. For example, start the Apache ShenYu gateway management system through local deployment .
After successful startup, you need to open the Divide plugin on in the BasicConfig -&amp;gt; Plugin. In the Apache ShenYu gateway, the HTTP request is handled by the Divide plugin.</description></item><item><title>Quick start with Motan</title><link>/projects/shenyu/quick-start-motan/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu/quick-start-motan/</guid><description>This document introduces how to quickly access the Apache ShenYu gateway using Motan RPC. You can get the code example of this document by clicking here.
Environment to prepare Please refer to the deployment to select a way to start shenyu-admin. For example, start the Apache ShenYu gateway management system through local deployment .
After successful startup, you need to open the Sofa plugin on in the BasicConfig -&amp;gt; Plugin.</description></item><item><title>Quick start with Sofa</title><link>/projects/shenyu/quick-start-sofa/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu/quick-start-sofa/</guid><description>This document introduces how to quickly access the Apache ShenYu gateway using Sofa RPC. You can get the code example of this document by clicking here.
Environment to prepare Please refer to the deployment to select a way to start shenyu-admin. For example, start the Apache ShenYu gateway management system through local deployment .
After successful startup, you need to open the Sofa plugin on in the BasicConfig -&amp;gt; Plugin, and set your registry address.</description></item><item><title>Quick start with Spring Cloud</title><link>/projects/shenyu/quick-start-springcloud/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu/quick-start-springcloud/</guid><description>This document introduces how to quickly access the Apache ShenYu gateway using Spring Cloud. You can get the code example of this document by clicking here .
Environment to prepare Please refer to the deployment to select a way to start shenyu-admin. For example, start the Apache ShenYu gateway management system through local deployment .
After successful startup, you need to open the springCloud plugin on in the BasicConfig -&amp;gt; Plugin.</description></item><item><title>Quick start with SpringCloud</title><link>/projects/shenyu-2.3.0/quick-start-springcloud/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/quick-start-springcloud/</guid><description>This document introduces how to quickly access the Soul Gateway using SpringCloud. You can get the code example of this document by clicking here.
Environment to prepare Please refer to the setup and launch soul-admin and soul-bootstrap.
Add the following dependencies to the soul-bootstrap&amp;rsquo;s pom.xml file: &amp;lt;!--soul springCloud plugin start--&amp;gt; dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;soul-spring-boot-starter-plugin-springcloud&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${project.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-cloud-commons&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.2.0.RELEASE&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-cloud-starter-netflix-ribbon&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.2.0.RELEASE&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- If using Eureka as a registry needs to be introduced --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.</description></item><item><title>Quick start with Tars</title><link>/projects/shenyu-2.3.0/quick-start-tars/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/quick-start-tars/</guid><description>This document introduces how to quickly access the Soul Gateway using Tars. You can get the code example of this document by clicking here.
Environment to prepare Please refer to the setup and launch soul-admin and soul-bootstrap.
Note: soul-bootstrap need to import tars dependencies
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;soul-spring-boot-starter-plugin-tars&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${project.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.tencent.tars&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;tars-client&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.7.2&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Run the soul-examples-tars project Download soul-examples-tars
Modify host in application.yml to be your local IP</description></item><item><title>Quick start with Tars</title><link>/projects/shenyu/quick-start-tars/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu/quick-start-tars/</guid><description>This document introduces how to quickly access the Apache ShenYu Gateway using Tars. You can get the code example of this document by clicking here .
Environment to prepare Please refer to the deployment to select a way to start shenyu-admin. For example, start the Apache ShenYu gateway management system through local deployment .
After successful startup, you need to open the Sofa plugin on in the BasicConfig -&amp;gt; Plugin.</description></item><item><title>Quick start with gRPC</title><link>/projects/shenyu/quick-start-grpc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu/quick-start-grpc/</guid><description>This document introduces how to quickly access the Apache ShenYu gateway using gRPC. You can get the code example of this document by clicking here .
Prepare For Environment Please refer to the deployment to select a way to start shenyu-admin. For example, start the Apache ShenYu gateway management system through local deployment .
After successful startup, you need to open the gRPC plugin on in the BasicConfig -&amp;gt; Plugin.</description></item><item><title>Quick start with grpc</title><link>/projects/shenyu-2.3.0/quick-start-grpc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/quick-start-grpc/</guid><description>This document introduces how to quickly access the Soul Gateway using Grpc. You can get the code example of this document by clicking here.
Environment to prepare Please refer to the setup and launch soul-admin and soul-bootstrap.
Note: soul-bootstrap need to import grpc dependencies
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;soul-spring-boot-starter-plugin-grpc&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${project.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Run the soul-examples-grpc project Download soul-examples-grpc
Run the following command under soul-examples-grpc to generate Java code
mvn protobuf:compile mvn protobuf:compile-custom Execute the org.</description></item><item><title>Quick start with http</title><link>/projects/shenyu-2.3.0/quick-start-http/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/quick-start-http/</guid><description>This document introduces how to quickly access the Soul Gateway using Http. You can get the code example of this document by clicking here.
Environment to prepare Please refer to the setup and launch soul-admin and soul-bootstrap.
Introducing gateway to HTTP proxy plugin
Add the following dependencies to the soul-bootstrap&amp;rsquo;s pom.xml file: &amp;lt;!--if you use http proxy start this--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;soul-spring-boot-starter-plugin-divide&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;soul-spring-boot-starter-plugin-httpclient&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${last.</description></item><item><title>Quick start with sofa</title><link>/projects/shenyu-2.3.0/quick-start-sofa/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/quick-start-sofa/</guid><description>This document introduces how to quickly access the Soul Gateway using Sofa RPC. You can get the code example of this document by clicking here.
Environment to prepare Please refer to the setup and launch soul-admin and soul-bootstrap, In addition, if you use ZooKeeper for Sofa, you need to download it in advance.
Note: soul-bootstrap need to import sofa dependencies
&amp;lt;!-- soul sofa plugin starter--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.alipay.sofa&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;sofa-rpc-all&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${sofa.rpc.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.</description></item><item><title>RateLimiter Plugin</title><link>/projects/shenyu-2.3.0/rate-limiter-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/rate-limiter-plugin/</guid><description>Explanation rateLimiter is core implementation of gateway restrictions on network traffic.
The soul gateway provides a variety of current limiting algorithms, including token bucket algorithm, concurrent token bucket algorithm, leaky bucket algorithm and sliding time window algorithm.
The implementation of current limiting algorithm of soul gateway is based on redis.
You can set to the interface level or the parameter level. How to use it depends on your traffic configuration.</description></item><item><title>RateLimiter Plugin</title><link>/projects/shenyu/rate-limiter-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu/rate-limiter-plugin/</guid><description>Description RateLimiter is core implementation of gateway restrictions on network traffic.
the Apache ShenYu gateway provides a variety of current limiting algorithms, including token bucket algorithm, concurrent token bucket algorithm, leaky bucket algorithm and sliding time window algorithm.
The implementation of current limiting algorithm of Apache ShenYu gateway is based on redis.
You can set to the interface level, or the parameter level. How to use it depends on your traffic configuration.</description></item><item><title>Redirect Plugin</title><link>/projects/shenyu-2.3.0/redirect-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/redirect-plugin/</guid><description>Explanation When the soul gateway makes proxy calls to the target service, it also allows users to use the redirect plugin to redirect requests.
Plugin Setting In soul-admin &amp;ndash;&amp;gt; plugin management &amp;ndash;&amp;gt; redirect ,set to enable。 Introduce redirect support in the pox.xml file of the gateway. If the user don&amp;rsquo;t use, please disable the plugin in the background. Selectors and rules, only matching requests will be forwarded and redirected, please see: Selector rules。 Maven Dependency Add the plugin dependency in the pom.</description></item><item><title>Redirect Plugin</title><link>/projects/shenyu/redirect-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu/redirect-plugin/</guid><description>Explanation When the Apache ShenYu gateway makes proxy calls to the target service, it also allows users to use the redirect plugin to redirect requests.
Plugin Setting In shenyu-admin &amp;ndash;&amp;gt; BasicConfig &amp;ndash;&amp;gt; Plugin &amp;ndash;&amp;gt; redirect , set to enable. If the user don&amp;rsquo;t use, please disable the plugin in the background. Selectors and rules, only matching requests will be forwarded and redirected, please see: Selector And Rule Config .</description></item><item><title>Register Center Access</title><link>/projects/shenyu-2.3.0/register-center-access/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/register-center-access/</guid><description>Explain Explain register center access config
HTTP Registry Soul-Admin Set the config in application.yml soul: register: registerType: http props: checked: true # is checked zombieCheckTimes: 5 # How many times does it fail to detect the service scheduledTime: 10 # Timed detection interval time Soul-Client Set the config in application.yml soul: client: registerType: http serverLists: http://localhost:9095 props: contextPath: /http appName: http port: 8188 isFull: false # registerType : register type, set http # serverList: when register type is http，set Soul-Admin address list，pls note &#39;http://&#39; is necessary.</description></item><item><title>Register Center Design</title><link>/projects/shenyu-2.3.0/register-center-design/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/register-center-design/</guid><description>Description This article mainly explains three ways of register center and their principles. Client When client server start, the register center client will be loaded by spi.
Put data to Disruptor when spring bean load.
Soul register client get data from Disruptor, and it will send request to register server.
Disruptor can decouple data from operation and facilitate expansion.
Server When Soul-Admin server start, register center server will be loaded by spi.</description></item><item><title>RequestPlugin</title><link>/projects/shenyu/request-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu/request-plugin/</guid><description>Explanation When ShenYu gateway makes proxy call to target service, it also allows users to add, modify and remove request headers by using &amp;lsquo;request&amp;rsquo; plugin to request parameters, request headers and cookies. Plugin Setting In shenyu-admin &amp;ndash;&amp;gt; BasicConfig &amp;ndash;&amp;gt; Plugin &amp;ndash;&amp;gt; request , set to enable. Introduce request support in the pox.xml file of the gateway. If the user don&amp;rsquo;t use, please disable the plugin in the background.</description></item><item><title>Resilience4j Plugin</title><link>/projects/shenyu-2.3.0/resilience4j-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/resilience4j-plugin/</guid><description>Explanation Resilience4j is one of the options that supports flow control and circuit breaking. Resilience4j supports flow control and circuit breaking functions for gateway. Plugin Setting In soul-admin &amp;ndash;&amp;gt; plugin management &amp;ndash;&amp;gt; resilience4j set to enable. If you don&amp;rsquo;t want to use it, please close the plugin in soul-admin. Plugin Usage Introducing the follow supports to the pom.xml file of soul project. &amp;lt;!-- soul resilience4j plugin start--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.</description></item><item><title>Resilience4j Plugin</title><link>/projects/shenyu/resilience4j-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu/resilience4j-plugin/</guid><description>Description Resilience4j is one of the options that supports flow control and circuit breaking. Resilience4j supports flow control and circuit breaking functions for gateway. Plugin Setting Select a mode to start shenyu-admin. For details, see deployment. For example, with Local Deployment starts the Apache ShenYu background management system.
In BasicConfig &amp;ndash;&amp;gt; Plugin &amp;ndash;&amp;gt; resilience4j, set to enable. If the user don&amp;rsquo;t use, please disable the plugin in the background.</description></item><item><title>Rewrite Plugin</title><link>/projects/shenyu-2.3.0/rewrite-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/rewrite-plugin/</guid><description>Explanation When making proxy invokes to the target service, soul Gateway also allows users to rewrite the request path using the rewrite plugin. Plugin Setting In soul-admin &amp;ndash;&amp;gt; plugin management &amp;ndash;&amp;gt; rewrite ,set to enable. Introduce rewrite support in the pox.xml file of the gateway. If the user don&amp;rsquo;t use, please disable the plugin in the background. &amp;lt;!-- soul rewrite plugin start--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;soul-spring-boot-starter-plugin-rewrite&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${last.</description></item><item><title>Rewrite Plugin</title><link>/projects/shenyu/rewrite-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu/rewrite-plugin/</guid><description>Explanation When making proxy invokes to the target service, Apache ShenYu gateway also allows users to rewrite the request path using the rewrite plugin. Plugin Setting In shenyu-admin &amp;ndash;&amp;gt; BasicConfig &amp;ndash;&amp;gt; Plugin &amp;ndash;&amp;gt; rewrite , set to enable. Add rewrite support in the pom.xml file of the gateway. If the user don&amp;rsquo;t use, please disable the plugin in the background. &amp;lt;!-- apache shenyu rewrite plugin start--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.</description></item><item><title>SPI Design</title><link>/projects/shenyu/spi-design/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu/spi-design/</guid><description>SPI, called Service Provider Interface, is a built-in JDK Service that provides discovery function and a dynamic replacement discovery mechanism.
shenyu-spi is a custom SPI extension implementation for Apache Shenyu gateway. The design and implementation principles refer to SPI Extension Implementations .
Registry Center Consul, Etcd, Http, Nacos and Zookeeper are supported. The expansion of the registry including client and server, interface respectively ShenyuServerRegisterRepository and ShenyuClientRegisterRepository.
Metrics Center Responsible for service monitoring, loading concrete implementation through SPI, currently support Prometheus, service interface is MetricsBootService.</description></item><item><title>Selector And Rule Config</title><link>/projects/shenyu/selector-and-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu/selector-and-rule/</guid><description>Features This document will introduce the use of selectors and rules in the Apache ShenYu background management system. For the concept and design of selectors and rules, please refer to Flow Control.
Please refer to the deployment document, choose a way to start shenyu-admin. For example, local deployment. After startup, visit http://localhost:9095, the default username and password are: admin and 123456 .
Selector All plugins are displayed in the PluginList, and selectors and rules can be added to each plugin:</description></item><item><title>Selector Detailed Explanation</title><link>/projects/shenyu-2.3.0/selector-and-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/selector-and-rule/</guid><description>Features Selector and rule are the key point of soul gateway, you can manage any request with it.
This chapter is mainly focus on the concepts of selector and rule and how to use it.
Overview One plugin has many selector and a selector has many rules, selector is the first filter of request, and the rule is the final filter. Please consider this, it would be perfect when the plugin executes the request until it reached the config value.</description></item><item><title>Sentinel Plugin</title><link>/projects/shenyu-2.3.0/sentinel-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/sentinel-plugin/</guid><description>Explanation Sentinel is one of the options that supports flow control and circuit breaking. Sentinel supports flow control and circuit breaking functions for gateway. Plugin Setting In soul-admin &amp;ndash;&amp;gt; plugin management &amp;ndash;&amp;gt; sentinel set to enable. If you don&amp;rsquo;t want to use it, please close the plugin in soul-admin. Plugin Usage Introducing the follow supports to the pom.xml file of soul project. &amp;lt;!-- soul sentinel plugin start--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.</description></item><item><title>Sentinel Plugin</title><link>/projects/shenyu/sentinel-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu/sentinel-plugin/</guid><description>Description Sentinel is one of the options that supports flow control and circuit breaking. Sentinel supports flow control and circuit breaking functions for gateway. Plugin Setting Select a mode to start shenyu-admin. For details, see deployment. For example, with Local Deployment starts the Apache ShenYu background management system.
In BasicConfig &amp;ndash;&amp;gt; Plugin &amp;ndash;&amp;gt; sentinel, set to enable. If the user don&amp;rsquo;t use, please disable the plugin in the background.</description></item><item><title>ShenYu Optimize</title><link>/projects/shenyu/shenyu-optimize/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu/shenyu-optimize/</guid><description>Description This doc shows how to do performance optimization for Apache ShenYu. Time Consumption Apache ShenYu is JVM driven and processing time for a single request is nearly between 1-3 ms. Netty Optimization spring-webflux is one of dependencies of ShenYu, and it uses Netty in lower layer. The demo down below demonstrates tuning ShenYu by customizing params in Netty. @Bean public NettyReactiveWebServerFactory nettyReactiveWebServerFactory() { NettyReactiveWebServerFactory webServerFactory = new NettyReactiveWebServerFactory(); webServerFactory.</description></item><item><title>ShenYu Release Guide</title><link>/community/release/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/community/release/</guid><description>GPG Settings 1. Install GPG Download installation package on official GnuPG website. The command of GnuPG 1.x version can differ a little from that of 2.x version. The following instructions take GnuPG-2.1.23 version for example. After the installation, execute the following command to check the version number. gpg --version 2. Create Key After the installation, execute the following command to create key. This command indicates GnuPG-2.x can be used: gpg</description></item><item><title>Sign Plugin</title><link>/projects/shenyu-2.3.0/sign-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/sign-plugin/</guid><description>Explanation Sign is a native plugin of soul Gateway and is used to process signature authentication of requests. Plugin Setting In soul-admin -&amp;gt; plugin management &amp;ndash;&amp;gt; sign set to enable. Plugin Usage Introducing sign dependency in the pom.xml file of the gateway &amp;lt;!-- soul sign plugin start--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;soul-spring-boot-starter-plugin-sign&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- soul sign plugin end--&amp;gt; Selectors and rules, please refer to: selector.</description></item><item><title>Sign Plugin</title><link>/projects/shenyu/sign-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu/sign-plugin/</guid><description>Description Sign is a native plugin of Apache ShenYu Gateway and is used to process signature authentication of requests. Plugin Setting Please refer to the deployment document, choose a way to start shenyu-admin. For example, through Local Deployment to start the Apache ShenYu management system.
In shenyu-admin BasicConfig &amp;ndash;&amp;gt; plugin -&amp;gt; sign set to enable. If you don&amp;rsquo;t want to use this function, please disable this plugin in the shenyu-admin.</description></item><item><title>Sofa Plugin</title><link>/projects/shenyu-2.3.0/sofa-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/sofa-plugin/</guid><description>Description The sofa plug-in is a plug-in that converts the HTTP protocol into the sofa protocol, and it is also the key to the gateway to realize the sofa generalization call. sThe sofa plug-in needs to cooperate with metadata to realize the call of Dubbo. Please refer to: Metadata。 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;soul-spring-boot-starter-plugin-sofa&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Plugin Settings First, go to soul-admin &amp;ndash;&amp;gt; plug-in management-&amp;gt; setting sofa is open.</description></item><item><title>Sofa Plugin</title><link>/projects/shenyu/sofa-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu/sofa-plugin/</guid><description>Description The sofa plugin is a plugin that converts the Http protocol into the sofa protocol, and it is also the key to the gateway to realize the sofa generalization call. The sofa plugin needs to cooperate with metadata to realize the call of Sofa. Plugin Setting Add related dependencies and enable plugin, please refer to: Quick start with Sofa .
Sofa client access, please refer to: Sofa Proxy .</description></item><item><title>Sofa Proxy</title><link>/projects/shenyu/sofa-rpc-proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu/sofa-rpc-proxy/</guid><description>This document is intended to help the Sofa service access the Apache ShenYu gateway. The Apache ShenYu gateway uses the Sofa plugin to handle sofa service.
Before the connection, start shenyu-admin correctly, start Sofa plugin, and add related dependencies on the gateway and Sofa application client. Refer to the previous Quick start with Sofa .
For details about client access configuration, see Application Client Access Config .
For details about data synchronization configurations, see Data Synchronization Config .</description></item><item><title>Sofa RPC Proxy</title><link>/projects/shenyu-2.3.0/sofa-rpc-proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/sofa-rpc-proxy/</guid><description>Description This article is about sofa users using sofa plug-in support,and the tutorial of connecting your own sofa service to the soul gateway. Before connecting, please start soul-admin correctly and Setup Environment Ok。 Introduce the plug-in that the gateway supports for sofa Add the following dependencies in the gateway&amp;rsquo;s pom.xml file： Replace the sofa version with yours, and replace the jar package in the registry with yours, The following is a reference。 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.</description></item><item><title>Soul Introduction</title><link>/projects/shenyu-2.3.0/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/overview/</guid><description> What is the Soul? This is an asynchronous, high-performance, cross-language, responsive API gateway.
Features Support various languages (http protocol), support dubbo, spring-cloud, Grpc, Motan, Sofa, Tars protocol. Plugin design idea, plugin hot swap, easy to expand. Flexible flow filtering to meet various flow control. Built-in rich plugin support, authentication, limiting, fuse, firewall, etc. Dynamic flow configuration, high performance. Support cluster deployment, A/B Test, blue-green release. Architecture Diagram</description></item><item><title>Soul Optimize</title><link>/projects/shenyu-2.3.0/soul-optimize/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/soul-optimize/</guid><description>Description This doc shows how to do performance optimization for soul. Time Consumption Soul is JVM driven and processing time for a single request is nearly between 1-3 ms. Netty Optimization spring-webflux is one of dependencies of soul, and it uses Netty in lower layer. The demo down below demonstrates tuning soul by customizing params in Netty. @Bean public NettyReactiveWebServerFactory nettyReactiveWebServerFactory() { NettyReactiveWebServerFactory webServerFactory = new NettyReactiveWebServerFactory(); webServerFactory.</description></item><item><title>Spring Cloud Plugin</title><link>/projects/shenyu/spring-cloud-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu/spring-cloud-plugin/</guid><description>Explanation This plugin is the core of transforming http protocol into springCloud protocol. Introducing Plugin Support of SpringCould Gateway Introducing those dependencies in the pom.xml file of the gateway. &amp;lt;!-- apache shenyu springCloud plugin start--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.shenyu&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;shenyu-spring-boot-starter-plugin-springcloud&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${project.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.shenyu&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;shenyu-spring-boot-starter-plugin-httpclient&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${project.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- apache shenyu springCloud plugin end--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-cloud-commons&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.2.0.RELEASE&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-cloud-starter-netflix-ribbon&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.2.0.RELEASE&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Plugin Setting Add related dependencies and enable plugin, please refer to: Quick start with Spring Cloud .</description></item><item><title>Spring Cloud Proxy</title><link>/projects/shenyu/spring-cloud-proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu/spring-cloud-proxy/</guid><description>This document is intended to help the Spring Cloud service access the Apache ShenYu gateway. The Apache ShenYu gateway uses the springCloud plugin to handle Spring Cloud service.
Before the connection, start shenyu-admin correctly, start springCloud plugin, and add related dependencies on the gateway and springCloud application client. Refer to the previous Quick start with Spring Cloud .
For details about client access configuration, see Application Client Access Config .</description></item><item><title>SpringCloud Plugin</title><link>/projects/shenyu-2.3.0/spring-cloud-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/spring-cloud-plugin/</guid><description>Explanation This plugin is the core of transforming http protocol into springCloud protocol. Introducing Plugin Support of SpringCould Gateway Introducing those dependencies in the pom.xml file of the gateway. &amp;lt;!--soul springCloud plugin start--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;soul-spring-boot-starter-plugin-springcloud&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;soul-spring-boot-starter-plugin-httpclient&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--soul springCloud plugin end--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-cloud-commons&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.2.0.RELEASE&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-cloud-starter-netflix-ribbon&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.2.0.RELEASE&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Plugin Setting In soul-admin &amp;ndash;&amp;gt; plugin management-&amp;gt; springCloud, set to enable.</description></item><item><title>SpringCloud Proxy</title><link>/projects/shenyu-2.3.0/spring-cloud-proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/spring-cloud-proxy/</guid><description>Features This article is a guide about how to integrate Spring Cloud with soul gateway quickly. Please enable springCloud plug-in in soul-admin background. Please start soul-admin successfully before integrating and Environment Setup is Ok. Configure soul gateway as Spring Cloud proxy add these dependencies in gateway&amp;rsquo;s pom.xml: &amp;lt;!--soul springCloud plugin start--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;soul-spring-boot-starter-plugin-springcloud&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--soul springCloud plugin end--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-cloud-commons&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.2.0.RELEASE&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.</description></item><item><title>Tars Plugin</title><link>/projects/shenyu/tars-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu/tars-plugin/</guid><description>Description The tars plugin is a plugin that converts the Http protocol into the tars protocol. Plugin Setting Add related dependencies and enable plugin, please refer to: Quick start with Tars .
Tars client access, please refer to: Tars Proxy .
Plugin Detail After the client accesses the Apache ShenYu gateway, it will automatically register the selector and rule information. You can see it in PluginList -&amp;gt; rpc proxy -&amp;gt; tars.</description></item><item><title>Tars Proxy</title><link>/projects/shenyu/tars-proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu/tars-proxy/</guid><description>This document is intended to help the Tars service access the Apache ShenYu gateway. The Apache ShenYu gateway uses the tars plugin to handle tars service. Before the connection, start shenyu-admin correctly, start tars plugin, and add related dependencies on the gateway and tars application client. Refer to the previous Quick start with Tars . For details about client access configuration, see Application Client Access Config . For details about</description></item><item><title>Team Introduction</title><link>/projects/shenyu-2.3.0/team/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/team/</guid><description> Team Member（In no particular order） Name Github Role Company Xiao Yu yu199195 VP jd.com Zhang Yonglun tuohai666 PMC jd.com Deng Liming dengliming PMC a start-up company Tang Yudong tydhot PMC perfma Zhang lei SaberSola PMC helloglobal Huang Xiaofeng huangxfchn committer shein Ding jianming nuo-promise committer a start-up company Feng Zhenbing fengzhenbing committer a start-up company yangze HoldDie committer IBM</description></item><item><title>Thread Model</title><link>/projects/shenyu-2.3.0/thread/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/thread/</guid><description>Description This article gives an introduction to thread models in soul and usage in various scenarios. IO And Work Thread spring-webflux is one of dependencies of soul, and it uses Netty thread model in lower layer. Business Thread Use scheduling thread to execute by default. A fixed thread pool manages business threads, the number of threads is count in this formula: cpu * 2 + 1.</description></item><item><title>Thread Model</title><link>/projects/shenyu/thread/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu/thread/</guid><description>Description This article gives an introduction to thread models in ShenYu and usage in various scenarios. IO And Work Thread spring-webflux is one of dependencies of ShenYu, and it uses Netty thread model in lower layer. Business Thread Use scheduling thread to execute by default. A fixed thread pool manages business threads, the number of threads is count in this formula: cpu * 2 + 1.</description></item><item><title>Use Different Data-Sync Strategy</title><link>/projects/shenyu-2.3.0/use-data-sync/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/use-data-sync/</guid><description>Features Data synchronization is the key of gateway high performance, which is to sync &amp;lsquo;soul-admin&amp;rsquo; config data into the JVM memory of soul cluster. Implementation principles, pls refer to：dataSync。 In the article, the gateway is the environment you setup. please refer to：Environment Setup. Websocket sync（default method，recommend） gateway setting（note:restart）
Add these dependencies in pom.xml： &amp;lt;!--soul data sync start use websocket--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;soul-spring-boot-starter-sync-data-websocket&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; add these config values in springboot yaml file: soul : sync: websocket : urls: ws://localhost:9095/websocket #urls: address of soul-admin，multi-address will be splitted with (,).</description></item><item><title>User Registration</title><link>/community/user-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/community/user-list/</guid><description> Known Users Here is a list of companies or organizations that we know have used all or some of Apache ShenYu&amp;rsquo;s components in production.This list is in no particular order:
Registration Please register and let us know so that we can serve you better.
Apache ShenYu registration</description></item><item><title>Waf Plugin</title><link>/projects/shenyu-2.3.0/waf-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/waf-plugin/</guid><description>Explanation Waf is the core implementation of gateway to realize firewall function for network traffic. Plugin Setting In soul-admin &amp;ndash;&amp;gt; plugin management-&amp;gt; waf set to enable. If the user don&amp;rsquo;t use, please disable the plugin in the background. Add configuration mode in plugin editing. {&amp;quot;model&amp;quot;:&amp;quot;black&amp;quot;} # The default mode is blacklist mode; If setting is mixed, it will be mixed mode. We will explain it specifically below.</description></item><item><title>Waf Plugin</title><link>/projects/shenyu/waf-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu/waf-plugin/</guid><description>Description Waf is the core implementation of gateway to realize firewall function for network traffic. Plugin Setting Please refer to the deployment document, choose a way to start shenyu-admin. For example, through Local Deployment to start the Apache ShenYu management system.
In shenyu-admin BasicConfig &amp;ndash;&amp;gt; plugin -&amp;gt; waf set to enable.If you don&amp;rsquo;t want to use this function, please disable this plugin in the shenyu-admin. Add configuration mode in plugin editing.</description></item><item><title>WebSocket Proxy</title><link>/projects/shenyu/websocket-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu/websocket-plugin/</guid><description>The Apache ShenYu gateway implements support for the WebSocket proxy through the Divide plugin.
Environment to prepare Please refer to the deployment to select a way to start shenyu-admin. For example, start the Apache ShenYu gateway management system through local deployment .
After successful startup, you need to open the Divide plugin on in the BasicConfig -&amp;gt; Plugin. For Divide plugin details, please refer to: Divide Plugin .
Add the following dependencies to the gateway&amp;rsquo;s pom.</description></item><item><title>Websocket Plugin</title><link>/projects/shenyu-2.3.0/websocket-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu-2.3.0/websocket-plugin/</guid><description>Explanation Soul gateway also support proxy of websocket. In websocket support, divide plugin is used in it. Plugin Setting In soul-admin &amp;ndash;&amp;gt; plugin management &amp;ndash;&amp;gt; divide, set to enable. Introducing dependencies in the pom.xml file of the gateway &amp;lt;!--if you use http proxy start this--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;soul-spring-boot-starter-plugin-divide&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;soul-spring-boot-starter-plugin-httpclient&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Request Path When using soul proxy websocket, its request path is (example):ws://localhost:9195/?</description></item><item><title>gRPC Plugin</title><link>/projects/shenyu/grpc-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu/grpc-plugin/</guid><description>Description The grpc plugin is a plugin that converts the Http protocol into the grpc protocol. Plugin Setting Add related dependencies and enable plugin, please refer to: Quick start with gRPC .
gRPC client access, please refer to: gRPC Proxy .
Plugin Detail After the client accesses the Apache ShenYu gateway, it will automatically register the selector and rule information. You can see it in PluginList -&amp;gt; rpc proxy -&amp;gt; grpc.</description></item><item><title>gRPC Proxy</title><link>/projects/shenyu/grpc-proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu/grpc-proxy/</guid><description>This document is intended to help the gRPC service access the Apache ShenYu gateway. The Apache ShenYu gateway uses the gRPC plugin to handle gRPC service.
Before the connection, start shenyu-admin correctly, start gRPC plugin, and add related dependencies on the gateway and gRPC application client. Refer to the previous Quick start with gRPC .
For details about client access configuration, see Application Client Access Config .
For details about data synchronization configurations, see Data Synchronization Config .</description></item><item><title>k8s Deployment</title><link>/projects/shenyu/deployment-k8s/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu/deployment-k8s/</guid><description>This article introduces the use of k8s to deploy the Apache ShenYu gateway.</description></item><item><title>release-notes</title><link>/projects/shenyu/release-notes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/shenyu/release-notes/</guid><description>2.3.0 soul-admin Add open field to allow app path authentication or not in sign plugin. Optimize divide plugin to use common plugin template in soul-dashboard. Add default values and rule checks in plugin handler. Add resource management to allow user to add plugin, adjust menu and button resource and so on in soul-dashboard and soul-admin. Add menu and data permission in soul-admin. Add H2 stroe for soul-admin soul-bootstrap Add tars plugin Add sentinel plugin &amp;ndash; Add sofa plugin Add Resilience4j plugin for soul-plugin.</description></item></channel></rss>