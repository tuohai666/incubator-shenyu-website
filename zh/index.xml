<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Apache ShenYu</title><link>/zh/</link><description>Recent content on Apache ShenYu</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><atom:link href="/zh/index.xml" rel="self" type="application/rss+xml"/><item><title>ShenYu Context-Path插件源码分析</title><link>/zh/blog/code-analysis-context-path-plugin/</link><pubDate>Fri, 20 Aug 2021 11:00:00 +0000</pubDate><guid>/zh/blog/code-analysis-context-path-plugin/</guid><description>Demo跑起来 启动ShenYu Admin 启动ShenYu Bootstrap 修改一下shenyu-examples-http（我们这里直接用shenyu的exampl</description></item><item><title>【发布Apache首个版本-2.4.0】让API网关变得简单</title><link>/zh/news/shenyu-2.4.0/</link><pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate><guid>/zh/news/shenyu-2.4.0/</guid><description>【Apache ShenYu(incubating) 2.4.0】: 让API网关更简单 声明:本文中的Apache ShenYu 都指的是 Apache ShenYu (incubating) 本人作者：肖宇 Apache ShenYu(incubating) Founder &amp;amp;&amp;amp; PPMC 2.4.0 Release Manager ： 张永伦 Apache ShenYu(incubating) PPMC &amp;amp;&amp;amp; Apache ShardingSphere</description></item><item><title>ICLA 签署指南</title><link>/zh/community/icla/</link><pubDate>Tue, 18 May 2021 00:00:00 +0000</pubDate><guid>/zh/community/icla/</guid><description>Apache ICLA 签署流程指南 Apache CLA 全称 Apache Contributor License Agreement，签署ICLA的目的是定义向ASF贡献的文档，保护知识产权，避免后续法律纠纷。ICLA在官方</description></item><item><title>Apache ShenYu 梦码读书会介绍</title><link>/zh/blog/apache-activites-introduce/</link><pubDate>Sun, 27 Dec 2020 15:00:00 +0000</pubDate><guid>/zh/blog/apache-activites-introduce/</guid><description>Apache ShenYu 梦码读书会（ShenYu 2020 活动介绍） 日期：2020年12月27日，星期日 活动背景 为了提高社区参与者的积极性, 促进ShenYu社区的建设,</description></item><item><title>【Soul 网关发布里程碑的2.3.0版本】新增支持GRPC，Tars，Sofa协议</title><link>/zh/news/shenyu-2.3.0/</link><pubDate>Sun, 05 Jul 2020 00:00:00 +0000</pubDate><guid>/zh/news/shenyu-2.3.0/</guid><description>距离上一次发布长达半年之久，在这半年的时间里，我与我的社区小伙伴们，做了太多太多的事情。 完成了将近 200 多次PR，发表了将近300 篇文章的源码解</description></item><item><title>Apache ShenYu Code Conduct</title><link>/zh/community/code-conduct/</link><pubDate>Tue, 09 Apr 2019 00:00:00 +0000</pubDate><guid>/zh/community/code-conduct/</guid><description>开发理念 用心 保持责任心和敬畏心，以工匠精神持续雕琢。 可读 代码无歧义，通过阅读而非调试手段浮现代码意图。 整洁 认同《重构》和《代码整洁之道》的理</description></item><item><title>Apache ShenYu Committer</title><link>/zh/community/committer/</link><pubDate>Tue, 09 Apr 2019 00:00:00 +0000</pubDate><guid>/zh/community/committer/</guid><description>提交者提名 当你做了很多贡献以后，社区会进行提名。 成为committer你会拥有 Apache ShenYu仓库写的权限 idea 正版使用 提交者责任 开发新功能； 代码</description></item><item><title>Apache ShenYu Contributor</title><link>/zh/community/contributor/</link><pubDate>Tue, 09 Apr 2019 00:00:00 +0000</pubDate><guid>/zh/community/contributor/</guid><description>您可以报告bug，提交一个新的功能增强建议或者直接对以上内容提交改进补丁。 提交issue 在提交issue之前，请经过充分的搜索，确定该iss</description></item><item><title>Apache ShenYu Issue And Pull Request</title><link>/zh/community/issue-pr/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/community/issue-pr/</guid><description>创建问题 如果您有任何问题，您可以选择创建一个问题来描述。 它有 4 种类型：错误报告、功能请求、问题和任务。 请遵循每种类型的模板，如果您的信息越详</description></item><item><title>Apache ShenYu Subscribe Email</title><link>/zh/community/subscribe-email/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/community/subscribe-email/</guid><description>在使用Apache ShenYu的过程中，如果您发现任何问题，有新的想法、建议都可以通过Apache邮件列表参与到Apache ShenYu的社</description></item><item><title>Apache ShenYu 介绍</title><link>/zh/projects/shenyu/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu/overview/</guid><description>什么是 Apache ShenYu 这是一个异步的，高性能的，跨语言的，响应式的 API 网关。 功能 支持各种语言(http 协议)，支持 Dubbo、 Spring Cloud、 gRPC、 Mo</description></item><item><title>Apache ShenYu 双因素认证 (By Apache ShenYu Committers)</title><link>/zh/community/2fa/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/community/2fa/</guid><description>双因素认证(2FA) 双因子验证（2FA）是指结合密码以及实物（信用卡、SMS手机、令牌或指纹等生物标志）两种条件对用户进行认证的方法。 为保证</description></item><item><title>Context Path插件</title><link>/zh/projects/shenyu-2.3.0/context-path-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu-2.3.0/context-path-plugin/</guid><description>说明 soul网关在对目标服务调用的时候，还容许用户使用 context_path 插件来重写请求路径的contextPath 插件设置 在 soul-admin &amp;ndash;&amp;gt; 插件管理 &amp;ndash;&amp;gt; context_path 设置为开启。 在网</description></item><item><title>Context Path插件</title><link>/zh/projects/shenyu/context-path-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu/context-path-plugin/</guid><description>说明 Apache ShenYu 网关在对目标服务调用的时候，还容许用户使用 context_path 插件来重写请求路径的 contextPath 插件设置 在 shenyu-admin &amp;ndash;&amp;gt; 基础配置 &amp;ndash;&amp;gt; 插件管理 &amp;ndash;&amp;gt; context_path 设置为开启。 如果用户不需要，可</description></item><item><title>Divide插件</title><link>/zh/projects/shenyu-2.3.0/divide-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu-2.3.0/divide-plugin/</guid><description>说明 divide插件是网关处理 http协议请求的核心处理插件。 插件设置 开启插件，soul-admin &amp;ndash;&amp;gt; 插件管理&amp;ndash;&amp;gt; divide 设置为</description></item><item><title>Divide插件</title><link>/zh/projects/shenyu/divide-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu/divide-plugin/</guid><description>说明 divide插件是网关用于处理 http协议请求的核心处理插件。 插件设置 引入相关依赖，开启插件，请参考：Http快速开始 。 Http应用客户</description></item><item><title>Dubbo快速开始</title><link>/zh/projects/shenyu-2.3.0/quick-start-dubbo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu-2.3.0/quick-start-dubbo/</guid><description>本文档将演示了如何快速使用Dubbo接入Soul网关。您可以直接在工程下找到本文档的示例代码。 环境准备 请参考配置网关环境并启动soul-ad</description></item><item><title>Dubbo快速开始</title><link>/zh/projects/shenyu/quick-start-dubbo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu/quick-start-dubbo/</guid><description>本文档演示如何将Dubbo服务接入到Apache ShenYu网关。您可以直接在工程下找到本文档的示例代码 。 环境准备 请参考运维部署的内容，选择</description></item><item><title>Dubbo接入soul网关</title><link>/zh/projects/shenyu-2.3.0/dubbo-proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu-2.3.0/dubbo-proxy/</guid><description>说明 此篇文章是dubbo用户使用dubbo插件支持，以及自己的dubbo服务接入soul网关的教程。 支持 alibaba dubbo（&amp;lt; 2.7.x） 以</description></item><item><title>Dubbo插件</title><link>/zh/projects/shenyu-2.3.0/dubbo-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu-2.3.0/dubbo-plugin/</guid><description>说明 dubbo插件是将http协议 转换成dubbo协议 的插件，也是网关实现dubbo泛化调用的关键。 dubbo插件需要配合元数据才能实现du</description></item><item><title>Dubbo插件</title><link>/zh/projects/shenyu/dubbo-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu/dubbo-plugin/</guid><description>说明 dubbo插件是将 http协议 转换成 dubbo协议 的插件，也是网关实现dubbo泛化调用的关键。 dubbo插件需要配合元数据才能实现du</description></item><item><title>Dubbo服务接入</title><link>/zh/projects/shenyu/dubbo-proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu/dubbo-proxy/</guid><description>说明 此篇文章是介绍 dubbo 服务接入到 Apache ShenYu 网关，Apache ShenYu 网关使用 dubbo 插件来接入Dubbo服务。 当前支持 alibaba dubbo（&amp;lt; 2.7.x） 以及 apache dubbo</description></item><item><title>Grpc快速开始</title><link>/zh/projects/shenyu-2.3.0/quick-start-grpc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu-2.3.0/quick-start-grpc/</guid><description>本文档将演示了如何快速使用Grpc接入Soul网关。您可以直接在工程下找到本文档的示例代码。 环境准备 请参考配置网关环境并启动soul-adm</description></item><item><title>Http快速开始</title><link>/zh/projects/shenyu-2.3.0/quick-start-http/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu-2.3.0/quick-start-http/</guid><description>本文档将演示了如何快速使用Http请求接入Soul网关。您可以直接在工程下找到本文档的示例代码。 环境准备 请参考配置网关环境并启动soul-a</description></item><item><title>Http快速开始</title><link>/zh/projects/shenyu/quick-start-http/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu/quick-start-http/</guid><description>本文档演示如何将Http服务接入到Apache ShenYu网关。您可以直接在工程下找到本文档的示例代码 。 环境准备 请参考运维部署的内容，选择一</description></item><item><title>Http服务接入</title><link>/zh/projects/shenyu/http-proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu/http-proxy/</guid><description>本文档旨在帮助 http 服务接入到 Apache ShenYu 网关。Apache ShenYu 网关使用 divide 插件来处理 http 请求。 接入前，请正确启动 shenyu-admin，并开启divide</description></item><item><title>Http用户</title><link>/zh/projects/shenyu-2.3.0/http-proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu-2.3.0/http-proxy/</guid><description>说明 本文旨在帮助http用户。 soul网关使用 divide 插件来处理http请求。请求在soul-admin后台开启它。 接入前，请正确的启动 soul-</description></item><item><title>Hystrix插件</title><link>/zh/projects/shenyu-2.3.0/hystrix-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu-2.3.0/hystrix-plugin/</guid><description>说明 hystrix插件是网关用来对流量进行熔断的核心实现。 使用信号量的方式来处理请求。 插件设置 在 soul-admin &amp;ndash;&amp;gt; 插件管理 &amp;ndash;&amp;gt; hystrix，设置为开启。 如</description></item><item><title>Hystrix插件</title><link>/zh/projects/shenyu/hystrix-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu/hystrix-plugin/</guid><description>说明 hystrix插件是网关用来对流量进行熔断的核心实现。 隔离模式支持 thread 和 semaphore 。 插件设置 请参考运维部署的内容，选择一种方式启动shenyu-a</description></item><item><title>JWT插件</title><link>/zh/projects/shenyu/jwt-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu/jwt-plugin/</guid><description>说明 jwt 插件，是针对 http 请求头的 token属性或者是 authorization 属性携带值进行鉴权判断，兼容 OAuth2.0 。 插件设置 请参考运维部署的内容，选择一种方式启动shenyu</description></item><item><title>Logging插件</title><link>/zh/projects/shenyu/logging-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu/logging-plugin/</guid><description>说明 Apache ShenYu 网关在对目标服务调用的时候，还容许用户使用 logging 插件在日志中打印本次请求信息，包含请求路径、请求方法、请求参数和响应头、响应体等信息。 插</description></item><item><title>ModifyResponse插件</title><link>/zh/projects/shenyu/modify-response-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu/modify-response-plugin/</guid><description>说明 modifyResponse插件是 Apache ShenYu 网关自带的，用来对响应进行修改的插件。 插件设置 在 shenyu-admin &amp;ndash;&amp;gt; 基础配置 &amp;ndash;&amp;gt; 插件管理 &amp;ndash;&amp;gt; modifyResponse 设置为开启。 插件使用 在网</description></item><item><title>Monitor插件</title><link>/zh/projects/shenyu-2.3.0/monitor-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu-2.3.0/monitor-plugin/</guid><description>说明 monitor插件是网关用来监控自身运行状态（JVM相关），请求的响应迟延，QPS、TPS等相关metrics。 技术方案 流程图 异步或者同</description></item><item><title>Monitor插件</title><link>/zh/projects/shenyu/monitor-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu/monitor-plugin/</guid><description>说明 monitor插件是网关用来监控自身运行状态（JVM相关），请求的响应迟延，QPS、TPS等相关metrics。 技术方案 流程图 异步或者同</description></item><item><title>Motan快速开始</title><link>/zh/projects/shenyu/quick-start-motan/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu/quick-start-motan/</guid><description>本文档演示如何将Motan服务接入到Apache ShenYu网关。您可以直接在工程下找到本文档的示例代码 。 环境准备 请参考运维部署的内容，选择</description></item><item><title>Motan插件</title><link>/zh/projects/shenyu/motan-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu/motan-plugin/</guid><description>说明 Motan插件是网关用于处理 Motan协议请求的核心处理插件。 插件设置 引入相关依赖，开启插件，请参考：Motan快速开始 。 Motan应用</description></item><item><title>Motan服务接入</title><link>/zh/projects/shenyu/motan-proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu/motan-proxy/</guid><description>此篇文介绍如何将 Motan 服务接入到 Apache ShenYu 网关，Apache ShenYu 网关使用 motan 插件来接入Motan服务。 接入前，请正确启动 shenyu-admin，并开启m</description></item><item><title>OAuth 2插件</title><link>/zh/projects/shenyu/oauth2-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu/oauth2-plugin/</guid><description>说明 OAuth2 插件使用 Webflux OAuth2 实现，用于支持 OAuth 协议。 插件设置 请参考运维部署的内容，选择一种方式启动shenyu-admin。比如，通过 本地部署 启动Apa</description></item><item><title>Param-mapping插件</title><link>/zh/projects/shenyu/param-mapping-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu/param-mapping-plugin/</guid><description>说明 param_mapping插件是 Apache ShenYu 网关自带的，用来对你的请求参数进行修改的插件。 插件设置 在 shenyu-admin &amp;ndash;&amp;gt; 基础配置 &amp;ndash;&amp;gt; 插件管理 &amp;ndash;&amp;gt; param_mapping 设置为开启。 插件使</description></item><item><title>RateLimiter插件</title><link>/zh/projects/shenyu/rate-limiter-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu/rate-limiter-plugin/</guid><description>说明 限流插件，是网关对流量管控限制核心的实现。 Apache ShenYu 网关提供了多种限流算法的实现，包括令牌桶算法、并发的令牌桶算法、漏桶算法、滑动时间窗口算法</description></item><item><title>Request插件</title><link>/zh/projects/shenyu/request-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu/request-plugin/</guid><description>说明 Apache ShenYu 网关在对目标服务进行代理调用的时候，还容许用户使用 request 插件对请求参数、请求头以及 Cookie 来添加、修改、移除请求头。 插件设置 在 shenyu-admin &amp;ndash;&amp;gt; 基础配置 &amp;ndash;&amp;gt; 插</description></item><item><title>Resilience4j插件</title><link>/zh/projects/shenyu-2.3.0/resilience4j-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu-2.3.0/resilience4j-plugin/</guid><description>说明 resilience4j插件是网关用来对流量进行限流与熔断的可选选择之一。 resilience4j为网关熔断限流提供能力。 插件设置 在 soul-admin &amp;ndash;&amp;gt;</description></item><item><title>Resilience4j插件</title><link>/zh/projects/shenyu/resilience4j-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu/resilience4j-plugin/</guid><description>说明 resilience4j插件是网关用来对流量进行限流与熔断的可选选择之一。 resilience4j为网关熔断限流提供能力。 插件设置 请参考</description></item><item><title>Rewrite插件</title><link>/zh/projects/shenyu-2.3.0/rewrite-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu-2.3.0/rewrite-plugin/</guid><description>说明 soul网关在对目标服务进行代理调用的时候，还容许用户使用 rewrite 插件来重写请求路径 插件设置 在 soul-admin &amp;ndash;&amp;gt; 插件管理 &amp;ndash;&amp;gt; rewrite，设置为开启。 在网关</description></item><item><title>Rewrite插件</title><link>/zh/projects/shenyu/rewrite-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu/rewrite-plugin/</guid><description>说明 Apache ShenYu 网关在对目标服务进行代理调用的时候，还容许用户使用 rewrite 插件来重写请求路径 。 插件设置 在 shenyu-admin &amp;ndash;&amp;gt; 基础配置 &amp;ndash;&amp;gt; 插件管理 &amp;ndash;&amp;gt; rewrite，设置为开启</description></item><item><title>SPI</title><link>/zh/projects/shenyu/spi-design/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu/spi-design/</guid><description>SPI 全称为 Service Provider Interface, 是 JDK 内置的一种服务提供发现功能, 一种动态替换发现的机制。 shenyu-spi 是Apache ShenYu网关自定义的SPI扩展实现，设计和实现原理</description></item><item><title>Sentinel插件</title><link>/zh/projects/shenyu-2.3.0/sentinel-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu-2.3.0/sentinel-plugin/</guid><description>说明 sentinel插件是网关用来对流量进行限流与熔断的可选选择之一。 sentinel为网关熔断限流提供能力。 插件设置 在 soul-admin &amp;ndash;&amp;gt; 插件管理 &amp;ndash;&amp;gt; sen</description></item><item><title>Sentinel插件</title><link>/zh/projects/shenyu/sentinel-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu/sentinel-plugin/</guid><description>说明 sentinel插件是网关用来对流量进行限流与熔断的可选选择之一。 sentinel插件为网关熔断限流提供能力。 插件设置 请参考运维部署的内</description></item><item><title>ShenYu Admin数据结构</title><link>/zh/projects/shenyu/database-design/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu/database-design/</guid><description>Apache ShenYu Admin 是网关的后台管理系统，能够可视化管理所有插件、选择器和规则，设置用户、角色，控制资源。 插件、选择器和规则 插件：Apache ShenYu 使用插件化</description></item><item><title>ShenYu 性能优化</title><link>/zh/projects/shenyu/shenyu-optimize/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu/shenyu-optimize/</guid><description>说明 本文主要介绍如何对 Apache ShenYu 进行优化。 本身消耗 Apache ShenYu本身所有的操作，都是基于 JVM 内存来匹配，本身消耗时间大概在 1-3ms 左右。 底层Netty调优</description></item><item><title>ShenYu发布指南</title><link>/zh/community/release/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/community/release/</guid><description>GPG设置 1. 安装GPG 在GnuPG官网下载安装包。 GnuPG的1.x版本和2.x版本的命令有细微差别，下列说明以GnuPG-2.1.23版本</description></item><item><title>Sign插件</title><link>/zh/projects/shenyu-2.3.0/sign-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu-2.3.0/sign-plugin/</guid><description>说明 sign插件是 soul网关自带的，用来对请求进行签名认证的插件。 插件设置 在 soul-admin -&amp;gt; 插件管理中 &amp;ndash;&amp;gt; sign插件设置为开启。 插件使用 在网关的 pom.xml 文件</description></item><item><title>Sign插件</title><link>/zh/projects/shenyu/sign-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu/sign-plugin/</guid><description>说明 Sign插件是Apache ShenYu网关自带的，用来对请求进行签名认证的插件。 插件设置 请参考运维部署的内容，选择一种方式启动sheny</description></item><item><title>Sofa快速开始</title><link>/zh/projects/shenyu-2.3.0/quick-start-sofa/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu-2.3.0/quick-start-sofa/</guid><description>本文档将演示了如何快速使用Sofa接入Soul网关。您可以直接在工程下找到本文档的示例代码。 环境准备 请参考配置网关环境并启动soul-adm</description></item><item><title>Sofa快速开始</title><link>/zh/projects/shenyu/quick-start-sofa/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu/quick-start-sofa/</guid><description>本文档演示如何将Sofa服务接入到Apache ShenYu网关。您可以直接在工程下找到本文档的示例代码 。 环境准备 请参考运维部署的内容，选择一</description></item><item><title>Sofa接入网关</title><link>/zh/projects/shenyu-2.3.0/sofa-rpc-proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu-2.3.0/sofa-rpc-proxy/</guid><description>说明 此篇文章是sofa用户使用sofa插件支持，以及自己的sofa服务接入soul网关的教程。 接入前，请正确的启动 soul-admin以及搭</description></item><item><title>Sofa插件</title><link>/zh/projects/shenyu-2.3.0/sofa-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu-2.3.0/sofa-plugin/</guid><description>说明 sofa插件是将http协议 转换成sofa协议 的插件，也是网关实现sofa泛化调用的关键。 sofa插件需要配合元数据才能实现dubbo的</description></item><item><title>Sofa插件</title><link>/zh/projects/shenyu/sofa-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu/sofa-plugin/</guid><description>说明 sofa插件是将http协议 转换成sofa协议 的插件，也是网关实现sofa泛化调用的关键。 sofa插件需要配合元数据才能实现sofa服务</description></item><item><title>Sofa服务接入</title><link>/zh/projects/shenyu/sofa-rpc-proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu/sofa-rpc-proxy/</guid><description>此篇文章是介绍 sofa 服务接入到 Apache ShenYu 网关，Apache ShenYu 网关使用 sofa 插件来接入sofa服务。 接入前，请正确启动 shenyu-admin，并开启sof</description></item><item><title>Soul介绍</title><link>/zh/projects/shenyu-2.3.0/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu-2.3.0/overview/</guid><description>什么是Soul 这是一个异步的，高性能的，跨语言的，响应式的API网关。 功能 支持各种语言(http协议)，支持Dubbo, Spring-Cloud, Grpc, Motan, Sofa, Tars等协</description></item><item><title>Soul性能优化</title><link>/zh/projects/shenyu-2.3.0/soul-optimize/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu-2.3.0/soul-optimize/</guid><description>说明 本文主要介绍如何对soul进行优化 本身消耗 soul本身所有的操作，都是基于jvm内存来匹配，本身消耗时间大概在 1-3 ms左右。 底层netty</description></item><item><title>Spring Cloud快速开始</title><link>/zh/projects/shenyu/quick-start-springcloud/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu/quick-start-springcloud/</guid><description>本文档演示如何将Spring Cloud服务接入到Apache ShenYu网关。您可以直接在工程下找到本文档的示例代码 。 环境准备 请参考运维部署</description></item><item><title>Spring Cloud插件</title><link>/zh/projects/shenyu/spring-cloud-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu/spring-cloud-plugin/</guid><description>说明 该插件是用来将http协议 转成 Spring Cloud协议。 插件设置 引入相关依赖，开启插件，请参考：Spring Cloud快速开始 。 Spring Cloud应用</description></item><item><title>Spring Cloud服务接入</title><link>/zh/projects/shenyu/spring-cloud-proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu/spring-cloud-proxy/</guid><description>此篇文章是介绍 springCloud 服务接入到 Apache ShenYu 网关，Apache ShenYu 网关使用 springCloud 插件来接入Spring Cloud服务。 接入前，请正确启动 shenyu-admin</description></item><item><title>SpringCloud快速开始</title><link>/zh/projects/shenyu-2.3.0/quick-start-springcloud/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu-2.3.0/quick-start-springcloud/</guid><description>本文档将演示了如何快速使用SpringCloud方式接入Soul网关。您可以直接在工程下找到本文档的示例代码。 环境准备 请参考配置网关环境并启</description></item><item><title>SpringCloud接入Soul网关</title><link>/zh/projects/shenyu-2.3.0/spring-cloud-proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu-2.3.0/spring-cloud-proxy/</guid><description>说明 此篇文章是教你如何将springCloud接口，快速接入到soul网关。 请在 soul-admin 后台将 springCloud 插件设置为开启。 接入前，请正确的启动 soul-ad</description></item><item><title>SpringCloud插件</title><link>/zh/projects/shenyu-2.3.0/spring-cloud-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu-2.3.0/spring-cloud-plugin/</guid><description>说明 该插件是用来将http协议 转成springCloud协议 的核心。 引入网关 springCloud的插件支持 在网关的 pom.xml 文件中引入如下依赖。 &amp;lt;!--soul</description></item><item><title>Tars快速开始</title><link>/zh/projects/shenyu-2.3.0/quick-start-tars/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu-2.3.0/quick-start-tars/</guid><description>本文档将演示如何快速使用Tars接入Soul网关。您可以直接在工程下找到本文档的示例代码。 环境准备 请参考配置网关环境并启动soul-admi</description></item><item><title>Tars快速开始</title><link>/zh/projects/shenyu/quick-start-tars/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu/quick-start-tars/</guid><description>本文档演示如何将Tars服务接入到Apache ShenYu网关。您可以直接在工程下找到本文档的示例代码 。 环境准备 请参考运维部署的内容，选择一</description></item><item><title>Tars插件</title><link>/zh/projects/shenyu/tars-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu/tars-plugin/</guid><description>说明 Tars插件是网关用于处理 Tars协议请求的核心处理插件。 插件设置 引入相关依赖，开启插件，请参考：Tars快速开始 。 Tars应用客户端接</description></item><item><title>Tars服务接入</title><link>/zh/projects/shenyu/tars-proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu/tars-proxy/</guid><description>此篇文介绍如何将 Tars 服务接入到 Apache ShenYu 网关，Apache ShenYu 网关使用 tars 插件来接入Tars服务。 接入前，请正确启动 shenyu-admin，并开启ta</description></item><item><title>Waf插件</title><link>/zh/projects/shenyu-2.3.0/waf-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu-2.3.0/waf-plugin/</guid><description>说明 waf插件，是网关的用来对流量实现防火墙功能的核心实现。 插件设置 在 soul-admin &amp;ndash;&amp;gt; 插件管理-&amp;gt; waf 设置为开启。 如果用户不想使用此功能，请在adm</description></item><item><title>Waf插件</title><link>/zh/projects/shenyu/waf-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu/waf-plugin/</guid><description>说明 Waf 插件，是网关的用来对流量实现防火墙功能的核心实现。 插件设置 请参考运维部署的内容，选择一种方式启动shenyu-admin。比如，通过 本</description></item><item><title>WebSocket代理</title><link>/zh/projects/shenyu/websocket-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu/websocket-plugin/</guid><description>Apache ShenYu 网关通过Divide插件实现了对websocket代理的支持。 环境准备 请参考运维部署的内容，选择一种方式启动shenyu-admin。比</description></item><item><title>Websocket支持</title><link>/zh/projects/shenyu-2.3.0/websocket-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu-2.3.0/websocket-plugin/</guid><description>说明 soul网关是支持 websocket的代理。 websocket支持中，使用了divide插件。 插件设置 在 soul-admin &amp;ndash;&amp;gt; 插件管理 &amp;ndash;&amp;gt; divide，设置</description></item><item><title>docker部署</title><link>/zh/projects/shenyu/deployment-docker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu/deployment-docker/</guid><description>本文介绍使用 docker 来部署 Apache ShenYu 网关。 启动Apache ShenYu Admin &amp;gt; docker pull apache/shenyu-admin &amp;gt; docker network create shenyu 使用 h2 来存储后台数据： &amp;gt; docker run -d -p 9095:9095 --net shenyu apache/shenyu-admin 使用 MySQL 来存储后台数据,将mysq</description></item><item><title>gRPC快速开始</title><link>/zh/projects/shenyu/quick-start-grpc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu/quick-start-grpc/</guid><description>本文档演示如何将gRPC服务接入到Apache ShenYu网关。您可以直接在工程下找到本文档的 示例代码 。 环境准备 请参考运维部署的内容，选择一</description></item><item><title>gRPC插件</title><link>/zh/projects/shenyu/grpc-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu/grpc-plugin/</guid><description>说明 gRPC插件是网关用于处理 gRPC协议请求的核心处理插件。 插件设置 引入相关依赖，开启插件，请参考：gRPC快速开始 。 gRPC应用客户端接</description></item><item><title>gRPC服务接入</title><link>/zh/projects/shenyu/grpc-proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu/grpc-proxy/</guid><description>此篇文章是介绍 gRPC 服务接入到 Apache ShenYu 网关，Apache ShenYu 网关使用 grpc 插件来接入gRPC服务。 接入前，请正确启动 shenyu-admin，并开启grp</description></item><item><title>helm部署</title><link>/zh/projects/shenyu/deployment-helm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu/deployment-helm/</guid><description>本文介绍使用 helm 来部署 Apache ShenYu 网关。</description></item><item><title>k8s部署</title><link>/zh/projects/shenyu/deployment-k8s/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu/deployment-k8s/</guid><description>本文介绍使用 k8s 来部署 Apache ShenYu 网关。</description></item><item><title>下载</title><link>/zh/projects/shenyu/download/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu/download/</guid><description>最新版本 Apache ShenYu (incubating) 的发布版包括源码包及其对应的二进制包。 由于下载内容分布在镜像服务器上，所以下载后应该进行 GPG 或 SHA-512 校验，以此来保证内容没有被篡改。</description></item><item><title>二进制包部署</title><link>/zh/projects/shenyu/deployment-package/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu/deployment-package/</guid><description>本文介绍使用二进制包部署 Apache ShenYu 网关。 启动 Apache ShenYu Admin 下载 apache-shenyu-incubating-2.4.0-admin-bin.tar.gz 解压缩 apache-shenyu-incubating-2.4.0-admin-bin.t</description></item><item><title>使用不同的数据同步策略</title><link>/zh/projects/shenyu-2.3.0/use-data-sync/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu-2.3.0/use-data-sync/</guid><description>说明 数据同步是指将 soul-admin 配置的数据，同步到 soul 集群中的JVM内存里面，是网关高性能的关键。 实现原理，请看：数据同步。 文中所说的网关，是指你搭建的网</description></item><item><title>元数据概念设计</title><link>/zh/projects/shenyu-2.3.0/meta-data/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu-2.3.0/meta-data/</guid><description>说明 本篇主要讲解在soul网关中元数据的概念，设计，以及如何对接。 技术方案 在数据库中，新增了一张表，然后通过数据同步的方案，会把这张表的数据</description></item><item><title>元数据概念设计</title><link>/zh/projects/shenyu/meta-data/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu/meta-data/</guid><description>说明 本篇主要讲解在 Apache ShenYu 网关中元数据的概念，设计，以及如何对接。 技术方案 在数据库中，新增了一张表，然后通过数据同步的方案，会把这张表的数据同步</description></item><item><title>团队介绍</title><link>/zh/projects/shenyu-2.3.0/team/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu-2.3.0/team/</guid><description>团队成员（排名不分先后） 名字 github 角色 所在公司 肖宇 yu199195 VP 京东 张永伦 tuohai666 PMC 京东 邓力铭 dengliming PMC 某创业公司 汤煜冬 tydhot PMC perfma 张磊 SaberSola PMC 哈罗 黄晓峰 huangxfchn committer shein 丁剑明 nuo-promise committer 某创业</description></item><item><title>多语言Http客户端</title><link>/zh/projects/shenyu/developer-shenyu-client/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu/developer-shenyu-client/</guid><description>说明 本文主要讲解其他语言的http服务如何接入网关。 如何自定义开发shenyu-http-client。 自定义开发 请求方式：POST 请求路径</description></item><item><title>多语言http客户端</title><link>/zh/projects/shenyu-2.3.0/developer-soul-client/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu-2.3.0/developer-soul-client/</guid><description>说明 本文主要讲解其他语言的http服务如何接入网关。 如何自定义开发 soul-http-client。 自定义开发 请求方式：POST 请求路径：h</description></item><item><title>字典管理</title><link>/zh/projects/shenyu-2.3.0/dictionary-management/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu-2.3.0/dictionary-management/</guid><description>说明 字典管理主要用来维护和管理公用数据字典 表设计 sql sql CREATE TABLE IF NOT EXISTS `soul_dict` ( `id` varchar(128) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT &#39;主键id&#39;, `type` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT &#39;类型&#39;, `dict_code` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT &#39;字典编</description></item><item><title>字典管理</title><link>/zh/projects/shenyu/dictionary-management/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu/dictionary-management/</guid><description>本文档将介绍Apache ShenYu后台管理系统中字典管理的使用，字典管理主要用来维护和管理公用数据字典。 请参考运维部署的内容，选择一种方式</description></item><item><title>客户端接入原理</title><link>/zh/projects/shenyu/register-center-design/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu/register-center-design/</guid><description>应用客户端接入是指将你的微服务接入到Apache ShenYu网关，当前支持Http、 Dubbo、 Spring Cloud、 gRPC、 Motan、 Sofa</description></item><item><title>客户端接入配置</title><link>/zh/projects/shenyu/register-center-access/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu/register-center-access/</guid><description>应用客户端接入是指将你的微服务接入到Apache ShenYu网关，当前支持Http、 Dubbo、 Spring Cloud、 gRPC、 Motan、 Sofa</description></item><item><title>提名新的Committer</title><link>/zh/community/vote-committer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/community/vote-committer/</guid><description>1、在 private@shenyu.apache.org的邮件列表讨论并投票，投票由现有的PPMC成员发起，邮件内容主要陈述提名者的活动和社</description></item><item><title>插件</title><link>/zh/projects/shenyu/plugin-design/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu/plugin-design/</guid><description>to do.</description></item><item><title>插件处理详解</title><link>/zh/projects/shenyu-2.3.0/plugin-handle-explanation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu-2.3.0/plugin-handle-explanation/</guid><description>说明 在soul-admin后台，每个插件都用handle（json格式）字段来表示不同的处理，而插件处理是就是用来管理编辑json里面的自定</description></item><item><title>插件扩展</title><link>/zh/projects/shenyu-2.3.0/custom-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu-2.3.0/custom-plugin/</guid><description>说明 插件是 soul 网关的核心执行者，每个插件在开启的情况下，都会对匹配的流量，进行自己的处理。 在soul 网关里面，插件其实分为2 类。 一类是单一职责</description></item><item><title>插件扩展</title><link>/zh/projects/shenyu/custom-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu/custom-plugin/</guid><description>说明 插件是 Apache ShenYu 网关的核心执行者，每个插件在开启的情况下，都会对匹配的流量，进行自己的处理。 在 Apache ShenYu 网关里面，插件分为两类。 一类是单一职责的调用</description></item><item><title>插件配置</title><link>/zh/projects/shenyu/plugin-handle-explanation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu/plugin-handle-explanation/</guid><description>本文档将介绍Apache ShenYu后台管理系统中插件的使用，包括插件管理和插件处理管理。 请参考运维部署的内容，选择一种方式启动shenyu</description></item><item><title>数据同步原理</title><link>/zh/projects/shenyu/data-sync/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu/data-sync/</guid><description>本篇主要讲解数据同步原理，数据同步是指在 shenyu-admin 后台操作数据以后，使用何种策略将数据同步到 Apache ShenYu 网关。Apache ShenYu 网关当前支持ZooKeeper、</description></item><item><title>数据同步设计</title><link>/zh/projects/shenyu-2.3.0/data-sync/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu-2.3.0/data-sync/</guid><description>说明 本篇主要讲解数据库同步的三种方式，以及原理。 前言 网关是流量请求的入口，在微服务架构中承担了非常重要的角色，网关高可用的重要性不言而喻。在</description></item><item><title>数据同步配置</title><link>/zh/projects/shenyu/use-data-sync/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu/use-data-sync/</guid><description>本篇主要讲解如何配置数据同步策略，数据同步是指在 shenyu-admin 后台操作数据以后，使用何种策略将数据同步到 Apache ShenYu 网关。Apache ShenYu 网关当前支持ZooKee</description></item><item><title>数据库设计</title><link>/zh/projects/shenyu-2.3.0/database-design/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu-2.3.0/database-design/</guid><description>插件采用数据库设计，来存储插件，选择器，规则配置数据，以及对应关系。 数据库表UML类图: 设计详解: 一个插件对应多个选择器，一个选择器对应多个</description></item><item><title>文件上传下载</title><link>/zh/projects/shenyu-2.3.0/file-and-image/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu-2.3.0/file-and-image/</guid><description>说明 本文主要介绍soul的文件上传下载的支持。 文件上传 默认限制文件大小为10M。 如果想修改，在启动服务的时候，使用--file.size = 3</description></item><item><title>文件上传下载</title><link>/zh/projects/shenyu/file-and-image/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu/file-and-image/</guid><description>说明 本文主要介绍 Apache ShenYu 的文件上传下载的支持。 文件上传 默认限制文件大小为10M。 如果想修改，在启动服务的时候，使用--file.size = 30，</description></item><item><title>文档下载</title><link>/zh/projects/shenyu-2.3.0/download/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu-2.3.0/download/</guid><description>PDF English 中文</description></item><item><title>本地启动</title><link>/zh/projects/shenyu/deployment-local/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu/deployment-local/</guid><description>本文介绍本地环境启动 Apache ShenYu 网关。 环境准备 本地正确安装JDK1.8+ 本地正确安装Git 本地正确安装Maven 选择一款开发工具，比如IDEA 下载编</description></item><item><title>权限管理</title><link>/zh/projects/shenyu/authority-management/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu/authority-management/</guid><description>说明 管理和控制经过 Apache ShenYu 网关的请求的权限。 生成的 AK/SK ，配合 sign 插件使用，实现基于URI级别的精准权限管控。 使用教程 第一步，我们可以直接在 基础配置 &amp;ndash;&amp;gt;</description></item><item><title>正确获取IP与Host</title><link>/zh/projects/shenyu/custom-parsing-ip-and-host/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu/custom-parsing-ip-and-host/</guid><description>说明 本文是说明，如果网关前面有一层nginx 的时候，如何获取正确的ip与端口。 获取正确的之后，在插件以及选择器中，可以根据 ip，与host来</description></item><item><title>正确获取Ip与host</title><link>/zh/projects/shenyu-2.3.0/custom-parsing-ip-and-host/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu-2.3.0/custom-parsing-ip-and-host/</guid><description>说明 本文是说明，如果网关前面有一层nginx 的时候，如何获取正确的ip与端口。 获取正确的之后，在插件以及选择器中，可以根据 ip，与host来</description></item><item><title>注册中心接入配置</title><link>/zh/projects/shenyu-2.3.0/register-center-access/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu-2.3.0/register-center-access/</guid><description>说明 说明然后使用不同的注册方式，快速接入。 HTTP方式注册 Soul-Admin配置 在 application.yml 配置注册中心为HTTP即可，如下： soul: register: registerType: http props: checked: true #是否</description></item><item><title>注册中心设计</title><link>/zh/projects/shenyu-2.3.0/register-center-design/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu-2.3.0/register-center-design/</guid><description>说明 本篇主要讲解注册中心原理 Client 配置中声明使用的注册中心客户端类型，如HTTP/Zookeeper 应用程序启动时使用SPI方式加载并初始化对应</description></item><item><title>流量控制</title><link>/zh/projects/shenyu/flow-control/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu/flow-control/</guid><description>Apache ShenYu网关通过插件、选择器和规则完成流量控制。相关数据结构可以参考之前的 ShenYu Admin数据结构。 插件 在shenyu-admin后台，每</description></item><item><title>版本发布</title><link>/zh/projects/shenyu/release-notes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu/release-notes/</guid><description>2.3.0 soul-admin Sign 插件新增是否开启APP 认证的字段。 优化Divide 插件，使用通用的插件模板。 插件处理管理中添加默认值和规则检查。 新增资源管理模块，使用</description></item><item><title>环境搭建</title><link>/zh/projects/shenyu-2.3.0/soul-set-up/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu-2.3.0/soul-set-up/</guid><description>说明 soul 2.2.0以后都是基于插件化可插拔的思想，本文是说明如何基于soul搭建属于你自己网关。 请确保你的机器安装了JDK 1.8+，Mysql</description></item><item><title>用户登记</title><link>/zh/community/user-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/community/user-list/</guid><description>已知用户 此处会列出我们已知的在生产环境使用了Apache ShenYu 全部或者部分组件的公司或组织。以下排名不分先后: 登记 请登记告诉我们，方便我们更好地</description></item><item><title>线程模型</title><link>/zh/projects/shenyu-2.3.0/thread/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu-2.3.0/thread/</guid><description>说明 本文主要介绍soul的线程模型，以及各种场景的使用。 io与work线程 soul内置依赖 spring-webflux 而其底层是使用的netty，这一块主要是使用的n</description></item><item><title>线程模型</title><link>/zh/projects/shenyu/thread/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu/thread/</guid><description>说明 本文主要介绍 Apache ShenYu 的线程模型，以及各种场景的使用。 IO与Work线程 Apache ShenYu 内置依赖 spring-webflux， 而其底层是使用的是 netty</description></item><item><title>自定义Filter</title><link>/zh/projects/shenyu-2.3.0/custom-filter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu-2.3.0/custom-filter/</guid><description>说明 本文是说明如何进行 org.springframework.web.server.WebFliter 的扩展。 跨域支持 新增 org.dromara.soul.bootstrap.cors.CrossFilter 实现 WebFilter。 public class CrossFilter implements WebFilter { private static final String ALLOWED_HEADERS = &amp;quot;x-requested-with, authorization, Content-Type, Authorization, credential, X-XSRF-TOKEN,token,username,client&amp;quot;; private static final String ALLOWED_METHODS = &amp;quot;*&amp;quot;; private static final String ALLOWED_ORIGIN = &amp;quot;*&amp;quot;; private static final</description></item><item><title>自定义Filter</title><link>/zh/projects/shenyu/custom-filter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu/custom-filter/</guid><description>说明 本文介绍如何对 org.springframework.web.server.WebFliter 进行扩展。 跨域支持 新增 org.apache.shenyu.web.filter.CrossFilter 实现 WebFilter。 public class CrossFilter implements WebFilter { private static final String ALLOWED_HEADERS = &amp;quot;x-requested-with, authorization, Content-Type, Authorization, credential, X-XSRF-TOKEN,token,username,client&amp;quot;; private static final String ALLOWED_METHODS = &amp;quot;*&amp;quot;; private static final String ALLOWED_ORIGIN = &amp;quot;*&amp;quot;; private static final String</description></item><item><title>自定义sign插件检验算法</title><link>/zh/projects/shenyu-2.3.0/custom-sign-algorithm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu-2.3.0/custom-sign-algorithm/</guid><description>说明 用户可以自定义签名认证算法来实现验证。 扩展 默认的实现为 org.dromara.soul.plugin.sign.service.Defa</description></item><item><title>自定义sign插件检验算法</title><link>/zh/projects/shenyu/custom-sign-algorithm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu/custom-sign-algorithm/</guid><description>说明 用户可以自定义签名认证算法来实现验证。 扩展 默认的实现为 org.apache.shenyu.plugin.sign.service.Def</description></item><item><title>自定义匹配条件策略</title><link>/zh/projects/shenyu/custom-condition-match/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu/custom-condition-match/</guid><description>说明 在自定义开发前，请先自定义搭建好网关环境，请参考: 自定义部署 本文介绍如何对 org.apache.shenyu.plugin.base.condition.strategy.MatchStrategy 进行自定义扩展。 扩展实现 新增一个类 ${you class}，实现 org.apache.shenyu.plugin.base.condition.strategy.MatchStrategy public class</description></item><item><title>自定义搭建网关</title><link>/zh/projects/shenyu/deployment-custom/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu/deployment-custom/</guid><description>本文介绍如何基于 Apache ShenYu 搭建属于你自己的网关。 启动Apache ShenYu Admin docker 用户参考 docker部署 Apache ShenYu Admin liunx/windows 用户参考二进制包部署 Apache ShenYu Admin 搭建自己的网关（推</description></item><item><title>自定义网关返回数据格式</title><link>/zh/projects/shenyu-2.3.0/custom-result/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu-2.3.0/custom-result/</guid><description>说明 本文是说明基于soul网关返回自定义的数据个数。 网关需要统一的返回格式，而每个公司都有自己定义的一套，所以需要对次进行扩展。 默认实现 默认</description></item><item><title>自定义返回结果</title><link>/zh/projects/shenyu/custom-result/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu/custom-result/</guid><description>说明 本文介绍基于 Apache ShenYu 网关返回自定义的数据格式。 网关需要统一的返回格式，如果需要自己定义格式，可以进行扩展。 默认实现 默认的实现为 org.apache.shenyu.plugin.api.result.DefaultShenyuResult 返回的数据格</description></item><item><title>规则</title><link>/zh/projects/shenyu/rule-design/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu/rule-design/</guid><description>to do.</description></item><item><title>贡献者</title><link>/zh/community/contributor-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/community/contributor-list/</guid><description>目前已经有上百位小伙伴为Apache ShenYu 贡献了文章和代码，非常感谢他们！ 想要参与贡献，可以直接去Apache ShenYu，并fork。</description></item><item><title>选择器和规则管理</title><link>/zh/projects/shenyu/selector-and-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu/selector-and-rule/</guid><description>本文档将介绍Apache ShenYu后台管理系统中选择器和规则的使用，关于选择器和规则的概念及设计请参考 流量控制。 请参考运维部署的内容，选择</description></item><item><title>选择器规则详解</title><link>/zh/projects/shenyu-2.3.0/selector-and-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu-2.3.0/selector-and-rule/</guid><description>说明 选择器和规则是soul网关中最灵魂的东西。掌握好它，你可以对任何流量进行管理。 本篇主要详解soul网关中，选择器与规则的概念，以及如何使</description></item><item><title>配置流程介绍</title><link>/zh/projects/shenyu-2.3.0/config/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu-2.3.0/config/</guid><description>说明 本篇是对admin后台操作数据以后，同步到网关的流程介绍。 使用 用户可以在 soul-admin 后台任意修改数据，并马上同步到网关的jvm内存中。 同步soul</description></item><item><title>配置流程介绍</title><link>/zh/projects/shenyu/config/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu/config/</guid><description>说明 本篇是对 shenyu-admin 后台操作数据以后，同步到网关的流程介绍。 使用 用户可以在 shenyu-admin 后台任意修改数据，并马上同步到网关的 jvm 内存中。 同步 ShenYu 的插件数据，选择器</description></item><item><title>重定向插件</title><link>/zh/projects/shenyu-2.3.0/redirect-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu-2.3.0/redirect-plugin/</guid><description>说明 soul网关在对目标服务进行代理调用的时候，还容许用户使用 redirect 插件来重定向请求。 插件设置 在 soul-admin &amp;ndash;&amp;gt; 插件管理 &amp;ndash;&amp;gt; redirect，设置为开启。 在网</description></item><item><title>重定向插件</title><link>/zh/projects/shenyu/redirect-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu/redirect-plugin/</guid><description>说明 Apache ShenYu 网关在对目标服务进行代理调用的时候，还容许用户使用 redirect 插件来重定向请求。 插件设置 在 shenyu-admin &amp;ndash;&amp;gt; 基础配置 &amp;ndash;&amp;gt; 插件管理 &amp;ndash;&amp;gt; redirect，设置为开启</description></item><item><title>限流插件</title><link>/zh/projects/shenyu-2.3.0/rate-limiter-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/shenyu-2.3.0/rate-limiter-plugin/</guid><description>说明 限流插件，是网关对流量管控限制核心的实现。 soul网关提供了多种限流算法的实现，包括令牌桶算法、并发的令牌桶算法、漏桶算法、滑动时间窗口</description></item></channel></rss>